            Received 20 August 2023, accepted 12 October 2023, date of publication 17 October 2023, date of current version 25 October 2023.
            Digital Object Identifier 10.1109/ACCESS.2023.3325349
            A Model of Design for Computing Systems:
            A Categorical Approach
            TAGEMOHAMMADAT ,(SeniorMember,IEEE)
            Embedded Computing Systems and KTH Royal Institute of Technology,114 28 Stockholm,Sweden
            e-mail: tage@embedded-computing.eu

              ABSTRACT This paper introduces the model of design (MoD),a framework that leverages category theory to
              study the design and development of computer-driven systems,to the academic and engineering communities
              dealing with computer systems. The model of design aims to offer a minimal framework for modelling the
              design and development of embedded computation across domains and abstractions, focusing on functional
              and extra-functional aspects as well as overarching concerns for automaticity, correctness and reuse. This
              nuanced approach provides insights into the theory and practice of computer systems design.

              INDEX TERMS Computing systems,computer-aided design (CAD),electronic design automation (EDA),
              embedded system design, architectural design, model-driven engineering, domain-specific modelling
              languages, model of computation, system-level design, hardware/software co-design.

            I. INTRODUCTION AND BACKGROUND                                                 remarked, elude the pioneers, but have also presented
            Since the advent of the digital revolution in the twenti-                      challenges to our capacity to engineer the necessary machin-
            eth century, computing has become ubiquitous in nearly                         ery for their production. To overcome these challenges,
            every facet of human society, permeating our daily lives,                      we employ computers to assist us in the development
            urban infrastructure, global connectivity, and extraterrestrial                and manufacturing of next-generation computers and com-
            endeavours. Driven by the market and benefiting from                           puter applications. Computer-assisted development tools and
            economiesofscale,thesheerquantityofcomputers–whether                           electronic design automation help tackle the engineering
            in familiar forms or embedded within other products – has                      challengebyleveragingdomain-specificcomputerprograms.
            surpassedtheglobalhumanpopulationbytwotothreetimes,                            By utilising high-level design and programming languages,
            with a growth rate outpacing that of the human population,                     we are able to write precise design descriptions and
            as indicated by the Cisco internet report [1]. Stanley Mazor,                  algorithms for computer programs that are intelligible to
            oneoftheco-inventorsofthefirstmicrocomputersystem[2],                          engineers. These descriptions can then be iteratively refined,
            eloquently expressed this sentiment in his memoir published                    optimised, analysed, and synthesised (by computer pro-
            in the IEEE Solid-State Circuit Magazine in 2009: ‘‘In 1960                    grams)intomachine-levelrepresentationsthatareunderstood
            - ten years before Intel developed the first single-chip CPU                   by computers. The computers, embedded within fabrication
            (microcomputer central processing unit) - the revolution                       foundries, assembly lines, vehicles, data centres and personal
            that would ensue was inconceivable: the cost of computing                      devices, then process these machine codes to produce useful
            dropped by a factor of a million, modes of personal com-                       apparatus and executable applications at large scales. This
            munication changed forever, and intelligent machines took                      engineering ecosystem is made possible by the continu-
            over processes in manufacturing, transportation, medicine -                    ous and compound advancements in information theories,
            virtually every aspect of our lives.’’ [3].                                    computer languages, communication technologies, device
               The rapid proliferation of computers and the growing                        modelling and design automation strategies, simulation
            demand for computing resources did not only, as Mazor                          and compilation technologies, verification and optimisation
                                                                                           methods, and computerised instrumentation & control sys-
               The associate editor coordinating the review of this manuscript and         tems, which evolve in tandem to support and enhance the
            approving it for publication was Ludovico Minati  .                            development process of computer systems and applications.
                                     
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

            To cope with the increasing complexity of computer               systems, applicable across various domains and stages of
          system design engineering ecosystem and the expanding              development, becomes ever more arduous. A meticulously
          application domains, design processes have been succes-            crafted framework that strikes a balance between abstraction
          sively adjusted by raising the level of abstraction for            andprecisioncanequipsystemdesigners,architects,business
          engineers, segregating design concerns, and breaking down          owners, and engineers with the means to aptly comprehend
          the scope into more manageable subsets across teams.               the intricacies of diverse computer products and applications.
          Researchers and practitioners such as Lee and Sangiovanni-         Such a framework allows them to focus selectively on
          Vincentelli [4], [5], [6], [7], [8], [9], have articulated how     particular areas of interest while preserving a generalised
          computers and applications are engineered using modelling          understanding within the broader context. This becomes
          languages at higher levels of abstraction incorporating            especially crucial in the emergent landscape where computer
          frameworks such as model-driven development, component-            programsareintegratedwithlargelanguagemodelsequipped
          based integration, and platform-based design. In each              with natural language processing capabilities. Engineers can
          engineering domain, domain-specific modelling languages            then prioritise comprehending overarching aspects of design
          are utilised to refine and integrate technical specifications,     problems and the development of computer applications or
          addressing particular design considerations to achieve the         systems from the perspective of specifications, rather than
          desired design outcome at a particular level of abstraction.       needingtoprimarytheminutiaeofmachineimplementations,
          In navigating through the array of differing modelling             which can be automatically generated by computers.
          languages, the application of metamodelling techniques                In this article, we introduce the model of design,
          and metaprogrammable tools becomes inevitable, and the             a framework established upon the foundations of category
          introduction of more domain-specific modelling languages is        theory [11]. The model of design attempts to scalably
          necessitated. However,thisdiversification leads to a complex       assist in the comprehension and navigation of the intri-
          spectrum of design paradigms, which can sometimes present          cacies inherent in computer engineering problems. As an
          conflicting methodologies. They conclude that the key to           abstractmathematicalbranch,categorytheorypresentsrobust
          managing design complexity lies in employing structured            toolsets for rationalising about abstract objects via their
          and formal design methodologies that can harmoniously              interrelationships. By applying category theory’s lens to
          integrate the various facets of the multi-scale design space,      the complex landscape of computer system design models
          be it behavioural, spatial, or temporal. These methodologies       and methodologies, we can distill properties useful for
          must provide suitable abstractions to tackle the inherent          system design, thereby enabling reasoning around high-level
          complexity and ensure that the resultant implementations are       notions such as compositionality, equivalence, and coher-
          correct-by-construction from the outset.                           ence. Leveraging the model-of-design concepts, we posit
            Recognising the need for further development and,                that vital components for correct-by-construction design
          in particular, for unifying methods in designing computer-         flows and automation of computer systems and applications
          driven systems, computer scientist Joseph Sifakis, known           can be discerned. Although the model-of-design framework
          for his works in model checking, has advocated for                 is not intended as an exhaustive, end-to-end correct-by-
          theories of design in his work on system design automa-            construction solution for all computing-related engineering
          tion [10] for embedded and cyber-physical systems. Like            disciplines, it seeks to provide a language encapsulating
          other researchers, he envisions that designing embedded            existing design paradigms and coalescing diverse domain
          and cyber-physical systems should be a process that is             perspectives within a rigorously delineated framework.
          correct-by-construction. However, he acknowledges that             Owing to its abstract nature, we believe the model of design
          such formalisation poses significant theoretical challenges,       can illuminate fresh perspectives and provide opportunities
          including the conceptualisation of needs, formal requirement       for future exploration and innovation beyond traditional
          expression, and the development of functionally correct and        computing systems.
          optimisedimplementationsonspecificplatforms.Despitethe                The remainder of this manuscript is structured as fol-
          immense potential, this venture has received, according to         lows: Section II introduces the necessary preliminaries to
          JosephSifakis,limitedattentionfromscientificcommunities,           prepare the reader for the formal definitions outlined in the
          partly due to the academic world’s preference for simple and       subsequent sections. In Section III, we lay the foundation
          elegant theories and the multidisciplinary nature of the field.    for our proposed framework. Subsection III-A delves into
          Sifakis concludes that achieving such formalisation requires       the essential elements of this framework, encompassing
          consistent integration of heterogeneous system models that         specifications, architecture, implementation, evaluation, and
          support different levels of abstraction, which encompass           design decisions, and concludes by providing a comprehen-
          logic, algorithms, programs, and physical system models.           sive definition of our model of design. Subsections III-B
            Inagreementwiththeaforementionedviews,werecognise                and III-C detail the emergent properties of our model and
          that as the evolution of engineering paradigms continues and       the corollaries derived from these properties, respectively.
          the intersection of disciplines increases, the task of devel-      Afterwards, Section IV situates our work within the context
          oping a comprehensive design framework for computing               of existing literature, offering a detailed discussion. The

          VOLUME11,2023                                                                                                              116305
                                                                              T. Mohammadat: MoD for Computing Systems: A Categorical Approach

         paper concludes with Section V, where we synthesise the            • This formal definition of language serves several
         key insights from our model of design, discuss its potential         purposes: 1) to distinguish our usage from the informal
         applications, and identify promising avenues for future              ones, such as those seen in natural languages used
         research.                                                            in requirement engineering for computing system
                                                                              designs, 2) to enable the manipulation or transla-
                                                                              tion of the language through well-established theo-
          II. PRELIMINARIES                                                   ries in formal languages and semantics, and 3) to
         To establish our conceptual framework, we begin by revis-            adopt a broad approach, treating formats, computer
         iting three foundational constructs: modelling languages,            scripts, programs, mathematical formulas, templates,
         abstraction spaces, and categorical axioms as follows:               algorithmic representations, data types, graphs, logi-
                                                                              cal/arithmetic operations, and abstract models as lan-
            Foundational Construct 1.      Language (Modelling                guages in a manner that is more formal than non-formal
            Language)                                                         languages.
            Amodellinglanguage,orsimplyalanguageL isatuple,                 • The grammar and semantics of a language are typically
            L =⟨6,G,S⟩where:                                                  understood within the context of its application. How-
               • 6 is a finite set of strings formed over an alphabet         ever, as indicated by Harel and Rumpe[14],thefunction
                 and adheres to the rules defined by G. Each string           of semantics in a (modelling) language goes beyond the
                 in 6 represents a well-formed sentence of the                metamodelofthelanguage,itscontextconditions,orits
                 language.                                                    execution environment.
               • G is a grammar defined as G = ⟨α,V,P,S⟩,                   • It is important to note that the execution and operational
                 where:                                                       semantics of a language need not be incorporated in the
                                                                              semantics unless the language is a computer program-
                 – α is a finite set of terminals or symbols.                 ming language. In such cases, execution semantics are
                 – V is a finite set of variables distinct from α.            crucial for its purpose. This remark aims to separate
                 – P is a set of production rules, with each rule             the definition of the (executable) language from its
                   mapping a variable to a string of symbols and              implementation for correct execution on a computer.
                   variables.                                               • Fundamentally, languages can be composite, wherein
                 – S ∈ V is the start variable.                               an extended version of a language or a combination of
               • S is a mappingfrom6 tothesemanticsormeaning                  two or more languages still form a language. This is
                 associated with each string in 6.                            represented as a set of strings of alphabets that follow
              Thealphabetαisrepresentedasα = {α ,α ,...,α }                   a grammar-generating meaning.
                                                    1   2       k           • Operations on (possibly) composite languages such as
            with cardinality |α| = k. A string in 6 is a sequence,            product, union, intersections, difference, and cardinality
            potentially repetitive, of symbols from α that has
            semantic meaning as defined by S.                                 may not embody the usual understanding of the opera-
              Afile is any binary or alternative representation, like         tion in set theory but rather a specialised understanding
            ASCII or UTF-8, that adheres to the grammar G of the              in the category theory sense [11]. In other words,
            language. Files may extend the original language for              an operation on a language L is an operation over a
            storage metadata, such as EOF markers. A library is an            subset of the Kleene closure (*) over the alphabet that
            organised collection of one or more such files.                   adheres to composition rules.
                                                                         Example 1 (Languages). Typically, languages are expressed
         Remark 1 (Regarding Languages).                                 indocumentscapturingboththealphabets(lexical,terminals,
            • Noam Chomsky categorised languages into several            symbols or vocabulary), grammar (syntax, valid expressions
              types: 1) regular expressions handled by finite state      or statements) and semantics together. Examples include
              machines, 2) context-free and context-sensitive gram-      the λ calculus (formal system), ISO/IEC8859 8-bit char-
              mars that can be addressed by stack-based computing        acter encodings and ANSI INCITS 4-1986[R2017] 7-Bit
              machines (push-down automata) or by linear bounded         ASCII (formats), IEEE 1666 SystemC specifications and
              automata, and 3) enumerable languages, which can           ISO/IEC 14882:2020 programming language C++, OMG
              be managed by Turing machines and random access            unified modelling language (UML) (modelling language),
              memory (RAM) based computers [12], [13]. The               the defacto standard graphic design system stream format
              reasoningbehindemployinglanguagesasafundamental            (GDSII) –database for manufacturing electronic chips), the
              conceptincomputerdesignliesintheirabilitytocapture         language reference for simulation programs with integrated
              varying complexity levels, which necessitate different     circuits emphasis (SPICE) –analysis and design of circuits,
              complexity levels of computers for their analysis,         IEEE 1076-2019 – very high-speed integrated circuit hard-
              compilation, and synthesis into implementations across     ware description language (VHSIC HDL or VHDL – a
              a range of abstraction and development stages.             hardware description language).

         116306                                                                                                         VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

            Applying principles from category theory, languages can
          beconceivedascategoriesarticulated through ontology logs.              1) S/T Space: symbolises the system/transaction
          Here,the‘objects’arethesentencesorexpressionswithinthe                     space.   It   covers   constructs    ranging   from
          language, while ‘morphisms’ are the valid transformations                  transaction-level  models (TLM) to systems-
          from one sentence to another, adhering to the rules of the                 of-systems. Within this, potential sub-spaces might
          language’s grammar. This perspective fosters a nuanced                     delve deeper into specific transaction types or
          understanding of the structural correlations between various               system hierarchies. The criteria distinguishing this
          sentences in the language and how they may be transformed,                 space are that information can be represented in
          providing a solid foundation for formal language analysis.                 transactions or tokens, or spacetime is portrayed
            Ontology logs function as a conduit to express these                     using quanta. This space exceeds the register-
          categories. In the realms of computer and information                      transfer level, considering abstract pseudocode
          sciences, ontology encapsulates a conceptualisation specifi-               algorithms on abstract computing machines with
          cation, deployed to reason about the properties of a domain.               perfect synchrony hypothesis or expressing time
          It essentially characterises the domain in terms of its objects            using abstract time quanta. This space includes
          and their interrelations. Ontology logs furnish a formal                   what the international semiconductor technology
          and explicit specification of a collective conceptualisation,              roadmap (ITRS) terms as the electronic system
          thereby structuring knowledge about specific domains.                      level, which could also house industry-dependent
            Forinstance,wecouldvieweachsentenceinalanguageas                         sub-spaces in areas like avionics, communications,
          an ‘object’ in the category, and the potential transformations             and automotive industries.
          between these sentences, in accordance with the language’s             2) RT Space: denotes the register-transfer space.
          rules, as ‘morphisms’. The ontology log methodically cap-                  It spans between logic layers of abstractions to
          turestheserelationships,facilitatingcomputationalreasoning                 register transfer levels. Distinguishing features of
          within the language. Note, further details on category theory,             this space include the representation of infor-
          whichprovideatheoreticalbackboneforthisdiscussion,will                     mation in bits or discrete time units such as
          be presented in Foundational Construct 3.                                  cycles, with no explicit spatial component. This
                                                                                     space encapsulates instruction set architectures and
                                                                                     micro-architectural implementation models, defin-
             Foundational Construct 2. Abstraction Spaces                            ing data types, operations, and execution models
             Let abstraction spaces A.S     be described as a mod-                   explicitly. Possible sub-spaces in this space within
                                          A
             elling language L = ⟨6,G,S⟩, where:                                     the electronic design automation (EDA) commu-
               • 6 encompasses constructs that are consistent                        nity may include intellectual property (IP) design
                  across both the main abstraction space and its sub-                blocks, gate-level, standard-cells level, and logic
                  spaces.                                                            level.
               • G is the grammar detailing how these constructs                 3) CSpace:representsthecircuitspace,detailingcon-
                  can be combined, applicable to both spaces and                     structs from digital switches to analogue circuits,
                  their sub-varieties.                                               mixed-signal circuits, and beyond to encapsulate
               • S provides the semantics, detailing the interpreta-                 other physical computing systems such as chem-
                  tionormeaningforeachconstructin6,suitablefor                       ical, biological, photonic, or mechanical systems.
                  overarching spaces and their finer subdivisions.                   This space is characterised by the capacity to
               This language captures the abstraction spaces, per-                   represent information as energy potential (voltage)
             mitting further granularity through sub-spaces, denoted                 and electric current, chemical changes, photonic
             as S . Each sub-space inherits the overarching char-                    signals, mechanicaldisplacement,orotherphysical
                 A                                                                   phenomena. In this space, we can denote time
             acteristics of its parent space but introduces additional
             or modified constructs, grammar rules, and semantics,                   continuously, without explicit spatial representa-
             reflecting the depth and breadth of design details                      tion. This abstraction space embraces circuits of
             specific to its domain.                                                 discrete components, monolithic circuits, as well
               Importantly, both abstraction spaces and their encap-                 as chemical, photonic, or mechanical systems,
             sulated sub-spaces are designed to address arbitrary                    without distinguishing among them, taking into
             engineering or practical choices of levels or hierarchies,              account the terminal characteristics of circuit
             contingent on the design context, industry domain, and                  element equivalents within the system. Possible
             the specific application or system under consideration.                 sub-spaces include switches, stick diagrams, and
               Drawing from [15], [16], we classify the following                    other equivalent representations for non-electronic
             abstraction spaces and potential subspaces therein:                     systems.

          VOLUME11,2023                                                                                                              116307
                                                                                       T. Mohammadat: MoD for Computing Systems: A Categorical Approach

                                                                                       waveforms and time is continuous. Lastly, in the
               4) P Space: is distinguished by the representation of                   physical space, information is represented as energy
                  information as energy or the explicit representation                 waveforms, and both space and time are explicitly
                  of spacetime. It includes the physical properties of                 considered. To manage system complexity, we allow
                  materials, semiconductor physics, and the interac-                   abstraction spaces to have sub-spaces that can be used
                  tion of energy with spacetime. Different scales of                   to express hierarchies.
                  space and time can be represented in this space to                 • Although the resulting definition, a fusion of various
                  capture various details and complexities. Potential                  abstractionconcepts,maybeoverlyabstractforimmedi-
                  sub-spaces could include networked racks in a data                   ate application in specific industrial domains, it could be
                  centre, interconnected discrete components as in                     valuable for capturing the generality of the concepts of
                  printed circuit boards, and integrated circuits at                   abstraction and hierarchies for the fundamental analysis
                  various scales.                                                      of their limitations and trade-offs.
                                                                                     • Intheory,thefundamentaldistinctionamongthevarious
          Remark 2 (On the choice of abstraction spaces).                              abstraction spaces might be helpful. However, in prac-
             • When a model is said to exist within an abstraction                     tice, system design often spans multiple abstraction
                space (or a sub-space), it signifies how computation                   spaces, and many design techniques might require
                or computing can be related to the granularity of                      information from lower-level spaces or hierarchies to
                information representation in relation to spacetime.                   make informed decisions at higher levels. An exam-
             • The purpose of this definition is to confine the use                    ple of this is the system-circuit cross-space design
                of abstraction spaces to the most fundamental cate-                    technique, dynamic voltage scaling (DVS), used at
                goriesthatuniquelycharacteriseinformationprocessing                    the system level for low-power dynamic computer
                (computing) in relation to spacetime (and possibly                     system design. Embedded and cyber-physical systems
                energy/matter).                                                        are another example where multiple abstractions are
             • The most prevalent concept of abstraction spaces                        exposed.
                over the past four decades, as outlined by [15],                     • Transaction abstraction is considered equivalent to
                [17], includes, generally speaking, system level (or                   system level and systems of systems level. This is
                system of systems), processor level, register-transfer                 mainlybecausewiththestandardisationofSystemCthat
                level, logical level, transistor/circuit level, and physical           encapsulates timing aspects in a spectrum of timed to
                implementation. These levels span three domains:                       untimed and information in transactions, the distinc-
                behavioural/functional,     structural/architectural,   and            tion of abstraction spaces above the transaction level
                physical/layout/geometric. Although these definitions                  becomes less fundamental with respect to information
                have been beneficial for the design of very large-scale                and spacetime.
                integrated (VLSI) systems and integrated circuits (IC),              • Theconsiderationofthephysicalspaceasanabstraction
                andhaveinfluencedthedevelopmentofcomputer-aided                        space, as opposed to a view or a domain as in the
                design (CAD) tools and electronic design automation                    Gajski-Kuhn Y-chart, is motivated by the observation
                (EDA) engineering, they might not be fundamental                       that computersystemsandnetworkstypicallyregardthe
                nor minimal. Industrial and application domains                        physical details of the computer/network as the most
                such as automotive (e.g., AutoSAR) and computer                        detailed level with respect to the electrical and mechan-
                networking (open systems interconnects, OSI) have                      ical characteristics of computing systems constituents.
                evolved to establish their own standards for defin-                    Furthermore, in analogue/radio frequency (RF)/mixed-
                ing domain-specific abstraction spaces. Therefore,                     signal circuits and digital systems, the physical aspects
                since embedded computer systems design hinges on                       are the closest to the manufactured/implementation.
                application/industrial domain specificity and electronic             • It is natural for computer system design to comprise
                design technologies, it seems reasonable to define                     cross-space aspects. The distinction and vocabulary
                a fundamental and minimal language for abstraction                     for the abstraction spaces make it possible to outline
                spaces that aligns with existing definitions.                          design activities with respect to the abstraction axis.
             • The granularity of expressing information with respect                  Obviously, when design complexity extends beyond
                to spacetime is the primary criterion considered for the               abstraction space boundaries and becomes ‘across-
                differentiation of abstraction spaces. For instance, in the            layers’ or ‘cross-level’, the ensuing complexities and
                system/transaction space, information is expressed by                  concerns are combined.
                transactions and spacetime is expressed using quanta.            Remark 3 (Candidate abstraction spaces).
                In the register-transfer space, information is represented           • Y-Chart: 1) Within the behavioural and structural
                as binary digits (bits), while spacetime is denoted as                 domains, systems, processor components, algorithms
                discrete time units, such as clock cycles. In the circuit              and transaction level modelling map to the S/T Space.
                space, information is represented as voltage/current                   2) Within the behavioural and structural domains,

          116308                                                                                                                      VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

               logic functions, boolean logic, arithmetic and logic              accuracy/complexity trade-offs, e.g. Verilog-A, differ-
               units (ALU), RT, gates netlists, and flip flops map to            ential equations for circuit elements can be used to
               the RT Space. 3) Within the behavioural and struc-                capture nanometric short-channel effects or simple
               tural domains, system transfer functions, stick/switch            linear V/I equations typically found in SPICE problems.
               diagrams, standard-cells complementary metal oxide              • P Space: This space contains components, entities,
               semiconductor (CMOS)basedtransistor circuits map to               objects, models and languages such as SPICE systems
               theCSpace.4)ThephysicaldomainmapstothePSpace                      for printed circuit boards and integrated systems,
               where the different levels of complexities map to the             Maxwell electromagnetic solvers for physical design
               different sub-spaces within the P Space.                          of radio frequency transceiver systems used in cellular
            • V-Chart: The V-Chart describes development stages                  networks and handheld devices, and thermodynamic
               rather than fundamental abstraction spaces: requirement           systems solvers for the packaging of integrated high
               and architectural analysis, system design, unit level             performance microcomputers.
               coding and implementation, unit integration, validation      The design of a typical programmable system-on-chip
               and testing. We view the level of abstraction within the     (SoC) based computer on a printed circuit board (PCB) in
               V-chart as applicable to all of the four spaces described    which the SoC is a monolithic hard processor IP and a
               herewith: 1) S/T Space 2) RT Space 3) C Space and 4)         field-programmable gate array (FPGA) fabric can comprise
               PSpace.                                                      modelsandlanguagesthatcrossdifferent abstraction spaces.
            • Double-roof Model (including a computer architecture          The PCB design extends over the C and P Spaces; hard
               taxonomy): 1) Systems, tasks and components map              and soft IPs extend over the RT to P Spaces; SystemC
               to the S/T Space. 2) Instructions, instruction set           models for dataflow computation to be compiled to assem-
               architecture(ISA),micro-architecture,gates,logic,RTL         bly and hardware accelerator using high-level synthesis
               map to the RT Space. The double-roof model does not          extend over S/T and RT Spaces. Examples of specialised
               provide explicit details about the C Space or P Space.       abstraction spaces for specific components are for computing
            • OSI (Networks domain): 1) Applications, presentation          component architectures instruction-set, micro-, and macro-
               and session spaces map to the S/T Space. 2) The              architecture; whereas for networking components, OSI as in
               transport space, network and data link spaces map to the     ISO/IEC7498.
               RT Space. 4) The physical space maps to the C Space
               and the P Space.
            • AUTOSAR Spaces (Automotive domain): 1) Applica-                 Foundational Construct 3.        Categories, Functors,
               tionsandrun-timeenvironment(RTE),operatingsystem               andNaturalTransformations(Mathematics)
               services map to the S/T Space. 2) Tasks/processes,             Category theory is a branch of mathematics that
               communication, device drivers, networks drivers, hard-         deals with abstract structures and relationships. The
               ware/firmware abstraction spaces, assuming they are            fundamental ideas in category theory are categories,
               at the binary level, map to the RT Space. 3) Vehicle,          functors, and natural transformations. By employing
               electronic controller units (ECU) and micro-controllers        these concepts, category theory enables the formal
               (MC)maptotheCSpaceandPSpace.                                   description and analysis of relationships, hierarchies,
          Example 2 (Abstraction spaces). An abstraction language             and abstractions in different fields.
          over four abstraction spaces (S/T, RT, C, P) could describe            Acategory C is a mathematical structure consisting
          the following vocabulary:                                           of:
            • S/TSpace:ThisspacecontainsentitiessuchasSystemC                    • Objects (Ob(C))
               approach to modelling, traditional dataflow model-of-             • Morphisms between objects (Hom (A,B))
               computation theories, UML based models, Simulink                                                       C
               based models, and architectural languages such as                 • Composition of morphisms, which is associative
               AADL. A sub-space for Transaction abstraction for                 • Identity morphisms for each object, which serve as
               a SystemC-based approach could be the different                     identity elements under composition.
               ‘untimed’, ‘loosely-timed’ and ‘timed’ sub-spaces.                Afunctor F from a category C to a category D is a
            • RTSpace: This space corresponds to the defacto notion           mapthat:
               of RTL (Register-Transfer Level). It contains com-                • Associates to each object A in C an object F(A) in
               ponents, entities, objects, models and languages such               D
               as VHDL, Verilog models. Corresponding sub-spaces                 • Associates to each morphism f : A → B in C a
               could be gate-level and switch-level, which are oth-                morphism F(f) : F(A) → F(B) in D such that
               erwise considered as their own distinctive abstraction              compositionandidentitymorphismsarepreserved.
               spaces in some contexts.                                       A natural transformation η from a functor F to
            • C Space: This space contains components, entities,              a functor G (both from C to D) is a collection of
               objects, models and languages that capture different           morphisms in D such that:

          VOLUME11,2023                                                                                                            116309
                                                                             T. Mohammadat: MoD for Computing Systems: A Categorical Approach

                                                                           Category theory’s inherent aptitude for abstractly and
              • For every object A in C, there is a morphism η   :      systematically delineating hierarchical structures and rela-
                                                              A
                F(A) →G(A)inD.                                          tionships validates its utility for our objectives. Thus, we are
              • For every morphism f : A → B in C, the following        promptedtoharnessthepowerofcategoricalreasoninginour
                diagram commutes:                                       exploration of programming languages, computer networks,
                                        ηA                              algorithms, hardware architectures, and software systems, all
                                  F(A) −→ G(A)                          pivotal in the design and cultivation of models for computing
                                  F(f) ↓↓ G(f)                          systems.
                                        ηB
                                  F(B) −→ G(B)                          III. THE MODEL-OF-DESIGN FRAMEWORK
              A morphism f     :  A → B in a category is an             Havingestablished the theoretical foundations for modelling
           isomorphism if there exists a morphism g : B → A             languages, abstraction spaces, and category-theoretic struc-
           such that f ◦ g = id and g ◦ f = id .
                              B               A                         tures, we now turn to detail the central elements of the
              The Yoneda embedding is a functor that embeds             model-of-design framework in Subsection III-A. Following
           a category C into the category of functors from C to         this, in Subsections III-B and III-C, we will explore the
           the category of sets, Set. Specifically, it associates to    pivotal properties and resulting corollaries derived from the
           each object A in C the functor Hom(−,A), and to each         framework.
           morphism f : A → B in C the natural transformation
           Hom(−,f).                                                    A. CORE CONSTITUENTS
            Employing the formalism of category theory allows us        The model-of-design framework draws upon a range of
         to delineate hierarchies and relationships within diverse      components: specifications, architecture, implementation,
         computer language models, networks, and their associated       evaluation, and design and development processes. In this
         abstractions with enhanced precision. This theoretical under-  section, we shed light on these concepts through individual
         pinning facilitates a deeper exploration into the connections  definitions from Definition III-A1 to III-A4, culminating in
         between computer programs and algorithms articulated in        the comprehensive model of design concept presented in
         formal languages, and between the structural elements          Definition 13, as follows:
         of computer hardware architectures or software systems.
         Specifically:                                                  1) SPECIFICATIONS
            • Computer programs and algorithms in formal lan-              Definition 1. Model of Specifications (MoS)
              guages:
              Through the lens of category theory, we can articulate       Let C be a category and L = ⟨6,G,S⟩ be a modelling
                                                                           language associated with an abstraction space A.S .
              the interplay between computer programs and algo-                                                               A
                                                                           A model of specifications (MoS) within A.S     serves
              rithms expressed in various formal languages. Objects                                                    A
              within this categorical framework might symbolise            as a category of two categories - the functional and
              different programming or specification languages, with       extra-functional specifications - and can be perceived as
              morphisms capturing translations or transformations          a modelling language.
              amongst them. Composing morphisms elucidates the              1) Categorical structure of MoS:
              process of melding or modifying programs using                    • Objects: Within the abstraction space A.S ,
              diverselanguageconstructs.Thisperspectivefurnishesa                                                             A
                                                                                  objects  in  MoS are constructed as pairs
              holistic yet rigorous means to investigate program trans-           that combine a model of functionality (MoF)
              formations, language compatibility, and compositional               defined through the grammar G of L and a
              attributes.                                                         modelofextra-functional specifications (MoX).
            • Structural components of computer hardware and soft-                Formally:
              ware systems:                                                                Ob     (MoS) : ⟨MoF,MoX⟩
              Similarly, category theory elucidates the intricate                             A.SA
              anatomy of computer hardware architectures and soft-              • Morphisms: Preserving the semantics S of L,
              waresystems.Here,objectscouldtypifycomponentsor                     morphisms in MoS express the transforma-
              modules such as processors, memory units, or software               tions or relationships between the encapsulated
              modules. Morphisms might illustrate relationships like              objects.Thesetransformationsarecontingenton
              data flows, control signals, or function calls. This                the specific system’s specifications, invariably
              categorical insight refines our understanding of the                aligned with the abstraction space A.S .
              structural dynamics within computer hardware or soft-                                                    A
              ware, proving invaluable for their design, scrutiny, and      2) Linguistic structure of MoS: A language of
                                                                               model of specifications, L   , encapsulates:
              enhancement.                                                                              MoS

         116310                                                                                                        VOLUME11,2023
         T. Mohammadat: MoD for Computing Systems: A Categorical Approach

              • 6     : A finite set of strings representing func-           2) Linguistic structure of MoF: The modelling
                  MoS
                 tional and extra-functional specifications. These              language for MoF, denoted as L       , is formally
                                                                                                                 MoF
                 can include functional requirements (F ), non-                 defined similar to the foundational structure of a
                                                          r
                 functional requirements (N ), constraints (K ), and            modellinglanguage.ItisgivenbythetupleL          =
                                           r                s                                                              MoF
                 conditions (C ).                                               ⟨6     , G    , S   ⟩, where:
                              s                                                    MoF    MoF   MoF
              • G     : A grammar:
                  MoS                                                            • 6      is a finite set of strings formulated over
                                                                                     MoF
                 – α    : Terminalssymbolisingspecificationprim-                   analphabetspecifictoMoF.Thesestringsdepict
                    MoS
                   itives like computation and conditions.                         the functional specifications and are constructed
                 – VMoS: Variables indicating intricate functional                 in accordance with the grammar GMoF. Each
                   specification structures.                                       string in 6    symbolises a coherent functional
                                                                                             MoF
                 – PMoS: Production rules that transmute specifi-                  sentence or construct of the system.
                   cation constructs into coherent design require-               • G     is a grammar which specifies how func-
                                                                                     MoF
                   ments.                                                          tional constructs are organised. It can be denoted
                 – S    : The start variable.                                      as G     =⟨α      , V   , P    , S   ⟩, where:
                    MoS                                                                MoF       MoF   MoF    MoF   MoF
              • S    : A semantic mapping from 6          ensuring                  – α      comprises terminals or symbols that
                  MoS                                MoS                                MoF
                 clarity and interpretation.                                          indicate primary functional elements.
                                                                                    – V      contains variables, apart from α    ,
                                                                                        MoF                                  MoF
            The union of the MoF and MoX within MoS, in the                           that perhaps signify more intricate functional
         categorical sense of the models, can be the merger of the                    constructs or dynamics.
                                                                                    – P      embraces production rules, enabling
         models resulting in a superset of alphabets, grammar and                       MoF
         semantics. The specifics of such operations can be model                     one to form functional descriptions from the
         dependent.                                                                   variables and terminals.
                                                                                    – S     ∈V       is the initial variable designat-
                                                                                        MoF     MoF
                                                                                      ing the beginning of functional descriptions.
                                                                                 • S     provides the semantic mapping for 6     ,
            Definition 2. Model of Functionality (MoF)                              MoF                                      MoF
                                                                                   associating each functional specification with its
            Givenanabstraction space A.SA described by the mod-                    pertinent meaning or context.
            elling language L = ⟨6,G,S⟩, a model of functionality
            (MoF) serves as a category of two categories (MoB
            and MoC) and can also be understood as a modelling              Such a linguistic structure aids in the comprehensive
            language, detailing the interactions of all potential        representation and understanding of system functionalities,
            functional specifications of a system via the constructs,    covering everything from basic functional elements to more
            grammar, and semantics of L.                                 complex dynamics.
              1) Categorical structure of MoF:                              By representing the model of functionality as a cate-
                 • Objects: Within the abstraction space A.S ,           gory, we can leverage the formal framework of category
                                                                A        theory to reason about the hierarchy, composition, and
                   objects in MoFaremappingsthat,viaL,convert
                   a set of input values and variable states (i,v) to    relationships between the channel interfaces, processes,
                   outputs o. In terms of the abstraction space, this    and process networks. The category structure provides
                   is articulated as:                                    a coherent and rigorous way to analyse and understand
                    Ob      (MoF) : ⟨i,v,o⟩ : i,v 7→ owith G ∈ L         the syntactic and semantic aspects of the computation
                       A.S
                          A                                              model.
                   Moreover, the objects amalgamate the model of         Remark 4 (Similarities between functionality and specifica-
                   computation (MoC)-elucidating computational           tion models). Thefunctionalmodel(MoF)cansometimesbe
                   structures and synchronisations - and the model       equivalent to several notions of the term specification models
                   of behaviour (MoB) - detailing internal dynam-        e.g. [16] and [18], where they describe the specification
                   ics of individual processes. Hence:                   model as the set of behaviours, channels and connectivity
                                           [                             relations.
                          Ob     (MoF) =      ⟨MoC,MoB⟩
                             A.SA
                 • Morphisms: Representing transformations or
                   associations among these objects, morphisms in           Definition 3. Model of Computation (MoC)
                   MoFalignwiththesemanticsS ofL,contingent                 Within a category C, a model of computation (MoC)
                   on the dynamics within the abstraction space             bridges categorical and linguistic structures to elucidate
                   A.SA.                                                    computational abstractions:

         VOLUME11,2023                                                                                                        116311
                                                                                   T. Mohammadat: MoD for Computing Systems: A Categorical Approach

              1) Categorical structure of MoC:                                  Themodeloffunctionality (MoF) specifies what a system
                  • Objects: Comprising I , P , and G , which                 does. It outlines the functionality of the system without
                                             p    p          h                considering timing or other forms of behaviour. It is
                    denote channel interfaces, parameterisable pro-           concerned primarily with the logical operations performed
                    cesses, and hierarchical labelled directed graphs,        by the system and the data transformations these operations
                    respectively. These form the foundational con-            create. The model of computation (MoC), on the other hand,
                    stituents of computational paradigms.                     specifies how a system does what it does. The MoC dictates
                  • Morphisms: Establish relationships between I ,
                                                                     p        theexecutionsemanticsofasystem,suchastherulesforhow
                    P , and G , according to the compositional rules
                      p       h                                               operations can be ordered and how data can be exchanged.
                    intrinsic to the MoC, portraying the dynamic              In other words, it sets the ‘rules of the game’ for computation
                    interconnections of computational systems.                and communication.
              2) Linguistic structure of MoC:                                 Example 3 (MoCs). Examples of MoC include: static
                  • Syntax:Governedbythetuple⟨6,G,S⟩,itchar-                  data-flow (SDF), homogeneous (synchronous) data flow
                    acterises the grammatical structures and interre-         (HSDF), cyclo-static data flow (CSDF), boolean data flow
                    lations typifying computational constructs.               (BDF), Dennis/dynamic data flow (DDF), variable rate
                  • Operational      semantics:     Articulates    the        dataflow (VRDF),multimodedataflow(MMDF),parametric
                    behavioural     evolution     of    actors     and        synchronous data flow (PSDF), schedulable parametric
                    processes, shaped by processes and signal                 dataflow (SPDF), scenario-aware dataflows (SADF), Kahn
                    transference.   This   encompasses rules that             process networks (KPNs), non-determinate data flow (NDF),
                    steer  computational    entities  over   temporal         discrete events/time (DE/DT), synchronous computation
                    progressions. Incorporating the denotational              (SY), continuous time computation (CT).
                    insights of Lee and Sangiovanni-Vincentelli [4],          Remark 5 (On the graph components of MoCs). While
                    processes in concurrent systems are represented           models of computations do not include by definition graphs,
                    as sets of potential behaviours. Composite                our reasoning for including graphs stems from two points:
                    processes yield behaviours intersecting those of
                    individual components. Interactions arise via                • as demonstrated by the tagged-signal framework
                    signals, collections of events described by value-             for comparing models of computations by Lee and
                    tag pairs. When tags are totally ordered, they                 Sangiovanni-Vincentelli [4], models of computation
                    delineate timed models. Processes possessing                   can be largely captured by signals, processes and their
                    identical tags exhibit synchronous signals.                    relations to the tag system. Since processes can be used
                                                                                   as vertices and signals can be used as edges. This makes
                                                                                   graphs implied from most MoCs.
             Categorically, wecaninterpretthecomponentsofthetuple                • as a matter of convenience, since many models of
          ⟨I ,P ,G ⟩ within the framework of category theory:                      computations such as Matlab/Simulink and SCCharts*
            p   p   h                                                              [19]aregraphicallyorientedatleastfromadesign-entry
            1) Ip (language describing channel interfaces): In the                 point of view, it is deemed appropriate to include graphs
               category, I   can be seen as the collection of objects
                           p                                                       as part of the MoC definition.
               representing the channel interfaces. Each interface
               corresponds to a specific input or output configuration        Remark 6 (Relation to MoCs). Models of computation
               of the computation model.                                      [20] typically defines 1) a network of interconnected set
            2) Pp (language describing parameterisable processes):            of computing elements referred to as processes (actors,
               The morphisms in the category can be associated                kernels or tasks), including the rules of composition, 2) the
               with the processes described by P . The morphisms              operational semantics or conditions and rules for firing or
                                                     p
               relate the inputs to the outputs, capturing the transfor-      execution of processes or the conditions 3) initial and status
               mations performed by the processes.                            for the conditions for the channels, process configurations
            3) Gh (set of labelled hierarchical directed graphs): The         and mode/scenarios. MoCs are often represented as set of
               composition of morphisms within the category can               input/outputs;portsandchannels(interfaces,I);setofprocess
               be identified with the graphs in Gh. The composition           (processes, P); process network (graph, G). Consequently,
               rules and denotations define the process networks that         the MoCs are defined as the language describing the
               interconnect the interfaces and processes, forming the         processes, interfaces and the graph in addition to the
               structure of the computation model.                            rules of composition, operational semantics, and other
            4) Parameters (X ): The parameters in the model of                emerging properties. The initial and status conditions of
                               p
               computation can be linked to the additional variables          the processes and interfaces map to the parameters. In the
               and conditions within the category. These parameters           categorical view, we can represent a MoC as a category
               definetheinitialconditions,status,andotheroperational          representingamodelofcomputationconsistsofthefollowing
               variables, such as scenarios and modes.                        components:

          116312                                                                                                                VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

            • Objects: The objects in the category represent different      relationships can be drawn to reason on the equivalency
               configurations or states of the computation model. Each      and gaps between the level of details each MoC has. Since
               object corresponds to a specific arrangement or setup        our general definition of MoCs includes general constructs
               of the computing elements, such as processes, actors,        such as processes, interfaces and graphs; in addition to the
               kernels, or tasks.                                           syntaxandsemanticsoftheseconstructs,wecanreasonabout
            • Morphisms: The morphisms in the category represent            different classes of MoCs and provide execution frameworks
               the transformations or mappings between different            to them.
               configurations or states of the model. Each morphism         Remark 8 (The association with the tagged-signal model).
               capturesthetransitionorchangefromoneconfiguration            The model of computation defined here can map to the
               to another, reflecting the behaviour and interactions of     tagged-signal model [4], when the parameters and the
               the computing elements.                                      operational semantics of the processes and interfaces of MoC
            • Composition: The composition of morphisms defines             are related to the tagged-signal model for the signals and
               how transformations can be combined or sequenced.            processes. The processes in our MoC maps to the processes
               Given two morphisms, f : A → B and g : B → C,                andtheinterfacesinourMoCmaptothesignalsinthetagged
               their composition denoted as g ◦ f       :   A → C           signal models. When defining values and tags as parameters
               represents the transformation obtained by applying           oftheprocessesandinterfaces,wemaptheMoCtothetagged
               f  followed by g. The composition allows for the             signal model.Henceforth,bydefiningtherelationofthetags,
               interconnection and sequential execution of processes        different variations of the MoC can be defined.
               within the computation model.                                Remark 9 (The suitability of MoCs to abstraction spaces).
            • Associativity Law: The composition of morphisms is            While MoCs are quite general, some MoCs fit abstraction
               associative, meaning that for any three morphisms f :        spaces better than others due to their level of details,
               A→B,g:B→C,andh:C→D,thecompositionis                          especially concerning time, e.g. KPNs and SDFs family fits
               associative as (h ◦ g) ◦ f = h ◦ (g ◦ f ). This law ensures  transaction levels better; synchronous model fits RT space
               that the order of composition is irrelevant and allows for   abstraction space better; continuous time model fits circuit
               the chaining of transformations.                             and physical abstraction spaces better. In computer science,
            • Identity Morphisms: For every object A, there exists          MoCs concepts may be included here, but we think they
               an identity morphism idA : A → A that serves as              map better within architectures of computers as shown in
               the neutral element with respect to composition. The         Example6.
               identity morphism preserves the configuration or state
               oftheobject,leavingitunchangedwhencomposedwith               Remark 10 (The role of behaviour in MoCs). Traditionally,
               other morphisms. The identity morphism ensures that          models of computation such as in MMDF, KPN or SADF,
               every object has an identity element and provides a          have been abstract about what are the limited set of possible
               consistent starting point for composition.                   (functional/ logical/ arithmetic/ relational) behaviours within
                                                                            the processes. This lack of explicitness renders some MoCs,
            The category structure, with its objects, morphisms, com-       on their own, insufficient to reason about functional correct-
          position, associativity law, and identity morphisms, allows us    nessofrefinement,synthesis,transformation,orcompilation;
          to formally reason about the behaviour and transformations        therefore we add the concept of the model of behaviour to
          within the model of computation. It provides a framework          complement such a lack.
          for studying the properties, relationships, and compositional
          aspects of the MoCs, their interactions, and the overall
          computation process.                                                Definition 4. Model of Behaviour (MoB)
          Remark 7 (MoCs hierarchies). Basic models of computa-               Let C be a category where:
          tions, thanks to their formalism, can be typically defined            1) Objects are computational behaviours. Within the
          and mapped [21] in the order of expressiveness and                       categoryB,anobjectsymbolisestheassignmentof
          analysability including: homogeneous synchronous dataflow                an input i to a behaviour, formalised as:
          and marked graphs (HSDF/MG), synchronous dataflow and                          Ob(MoB):λx.(B) where x ∈ i, B ∈ B
          weighted marked graphs (SDF/WMG), computation graphs
          (CG), cyclo-static dataflows (CSDF), parameterised syn-                  In a manner analogous to programming functions,
          chronous dataflow (PSDF), variable rate dataflow (VRDF),                 this object denotes the binding of an input i
          finite state machine scenario aware dataflow or hete-                    to a variable x, subsequently replacing x in the
          rochronous dataflow (FSM-SADF)/HDF, variable phase                       behaviour B with i.
          dataflow (VPDF), boolean dataflow (BDF), SADF, Kahn                   2) Morphisms describe transformations between
          processnetworks(KPN),dynamic/Denisdataflow(DDF)and                       behaviours. These transformations are analogous
          reactive process networks (RPN). On the basis of the rela-               tothefunctionmappingsinstandardprogramming,
          tion between these basic MoCs, different transformational

          VOLUME11,2023                                                                                                            116313
                                                                                    T. Mohammadat: MoD for Computing Systems: A Categorical Approach

                                                                              Example 4 (MoF, MoC and MoB). Examples to illustrate
                  described as:                                               possible definitions for MoF, MoC and MoB may include:
                    Hom       (A,B) : f (i,x,o) : i 7→ o,x = B ∈ B               • Examples of MoC are synchronous model of computa-
                         MoB                                                        tionandscenario-awaredataflowmodelofcomputation.
                  Here, both A and B belong to B. The symbols i and                 An example of MoB is functional language Haskell
                  o denote input and output, respectively.                          that defines language for behaviours. A resulting MoF
               Thus, a model of behaviour (MoB) within C                            for the mentioned MoC ∪ MoB is ForSyDe modelling
            offers a categorical representation of behavioural con-                 framework.
            structs, grounding itself in principles reminiscent of the           • VHDL (simulation subset) can be described as MoF
            λ-calculus. This representation is both rigorous in                     with MoC being the discrete time model of compu-
            theory and directly relatable to traditional programming                tation, while the MoB being the valid statements and
            constructs.                                                             expressionswithintheprocesses/procedures/functions/
                                                                                    modules. In HDL where behavioural style is used, the
          Remark 11 (On the choice of λ-calculus for MoB). As                       MoC becomes the synchronous MoC. Synopsis and
          it is noted that λ-calculus is a well-known fundamental                   Cadencedesignframeworksareprimeexamplesforuse
          notion for defining (mathematical) functions within the                   of such MoFs.
          theory of computation, it is deemed appropriate to represent           • SimulinkandAMD/Xilinxmodelcomposercanbecon-
          (behaviours of) computation in a fundamental way. This def-               sidered as computer-aided design tools that utilise Mat-
          inition additionally allows capturing analogue, mechanical                lablanguage(Mfiles)andtheassociatedexecutionmod-
          and physical behaviours that can be interesting for capturing             els. In this case, the MoF is the (synthesisable subset of)
          information processing associated with radio engineering,                 Matlab language with MoC being a discrete event/time
          optical systems and electro-mechanical systems.                           model of computation, while the MoB being the valid
          Remark 12 (MoCandMoB).                                                    expressions/computations that can be done within the
             • The explicit definition for the set of behaviours makes              individual Simulink blocks or callback functions.
               it possible to allow unambiguous execution of func-            Remark 13 (The Overlap Within MoF). Several standard
               tional specifications in the sense of hardware/software        design specifications, such as IEEE 754 for floating point
               codesign and enables the expressiveness of MoCs to             within the simulation subset of design specification lan-
               model concepts such as instruction set architecture            guages like IEEE 1076/1364/1666/1800 (VHDL/Verilog/
               (ISA), and the arithmetic and logical operations within        SystemC/System Verilog), can sufficiently describe models
               a programming language. For example, the modelling             for the grammar (syntax) and semantics of the func-
               framework within ForSyDe [18] uses MoCs in addition            tional/behavioural specifications. These languages implicitly
               to the languages Haskell and SystemC to enable clear           contain or model various models of computation such as
               and explicit notion of behaviours and computation.             discrete time/ events for digital systems, and continuous
             • MoBcanbeconsidered as a complementary concept to               time for analogue and mixed-signal systems. In practice, the
               the MoC or as a superior concept that subsumes MoC             (implied) functional, behavioural and computational models
               or as a subset of MoC depending on how the MoC and             coexist and merge within the same language. Furthermore,
               MoBaredefined.                                                 system designers can include in the functional specification
             MoF captures the functionality of the system including           other notions that we consider, for theoretical purposes, to be
          (possibly) model of computation (MoC) as defined exten-             included in what we call extra-functional specification, e.g.
          sively in literature [4] and (possibly) model of behaviour          constraints on timing.
          (MoB). MoF and MoB map to the behavioural domain of                 Remark 14 (Use of Categories for MoF, MoC and MoB).
          Gajski-Kuhn Y-chart and computation independent model               Category theory provides a framework to describe and
          (CIM) in OMG’s model-driven-architecture (MDA) termi-               analyse different abstract objects. This can also be extended
          nology. The model of behaviour refers to the syntactic              models of computation, behaviours and functionalities, and
          and semantics used to capture the computation within                their relationships. By representing models as categories and
          each process/actor. It is however necessary to distinguish          defining appropriate morphisms between them, we can study
          our notion of MoF from non-computational but some-                  their properties, transformations, and connections. Here is
          times considered within the functional requirements as for          howcategorytheorycanbeusedtodescribedifferentmodels
          example is the case of avionics ARP4754 which falls                 and their relationships:
          within what we call, eXtra-functional, i.e. MoX. In fact,             1) Category for a Model of Computation (in general):
          most of the industrial standards such as ISO262626 and                    To describe a category as a model of computation,
          IEC61058, on specifications and compliance can be mapped                  wedefine the category as follows:
          to MoX (Definition 5) and the associated design rules                     • Objects: Objects in the category represent different
          (Definition 9).                                                             processes and channels.

          116314                                                                                                                 VOLUME11,2023
         T. Mohammadat: MoD for Computing Systems: A Categorical Approach

               • Morphisms: Morphisms in the category represent                associativity and identity laws are upheld. This means
                 transformations or mappings between the processes,            thecompositionofmorphismsadherestotheassociative
                 interfaces and graphs. These morphisms capture the            law,andtheidentitymorphismscomplywiththeidentity
                 relationships, translations, or compositions between          laws.
                 different objects.                                         To summarise, using category theory to describe models
           2) Category of Models of Computations (in general):            of functionality (MoF), models of computation (MoC), and
              To describe the category of models of computations,         modelsofbehaviour(MoB)presentsseveralvaluableinsights
              wedefine the category as follows:                           and advantages:
               • Objects: Objects in the category represent different      1) Universality: One of the core benefits of using category
                 models of computation.                                        theory in these contexts is its ability to provide a uni-
               • Morphisms: Morphisms in the category represent                versal language for mathematics and computer science.
                 relationshipsorconnectionsbetweendifferentmodels              This allows for the encoding of different computational
                 of computation. These morphisms capture the map-              and behavioural models within a unified framework,
                 pings or transformations between models.                      facilitating comparison and interaction between differ-
           3) Category for a Model of Computation (specific): Let us           ent systems and models.
              consider the specific model of computation called the        2) Structural Insights: Categories can highlight the struc-
              ‘synchronous data flow (SDF)’ model. We can define a             turalpropertiesofMoF,MoC,andMoB.Themorphisms
              category where:                                                  (arrows) in a category represent transformations or
               • Object: The object represents the SDF models.                 relationships, revealing structural insights about the
               • Morphisms: Morphisms in the category represent                entities being modelled. These structural properties can
                 transformations or mappings between different SDF             provide a deeper understanding of the system, and can
                 models.                                                       often be used to identify common patterns or structures
                 The category structure allows us to reason about the          across different systems.
                 properties,transformations,andrelationshipsspecific       3) Abstraction and Generality: Category theory provides a
                 to the SDF model. We can study the composability              high level of abstraction. This means that the specifics
                 of SDF models, the existence of isomorphisms or               of individual objects within a category can be abstracted
                 equivalences, and other categorical constructions that        away to focus on the relationships between them (the
                 capture the essence of the SDF model.                         morphisms).InthecontextofMoF,MoC,andMoB,this
           4) Category for Models of Computation (specific): Let us            couldhelptoidentifycommonalitiesanddifferencesata
              consider a specific collection of models of computation,         high level, without getting bogged down in the specifics
              including SDF, HSDF, and CSDF. We can define a                   of each individual model.
              category where:                                              4) FunctorsandNaturalTransformations:Categorytheory
               • Objects: Objects in the category represent different          introduces the concepts of functors and natural transfor-
                 models of computation such as SDF, HSDF, and                  mations. Functors are mappings between categories that
                 CSDF.                                                         preserve their structure, while natural transformations
               • Morphisms: Morphisms in the category represent                are mappingsbetweenfunctorsthatpreservetheirstruc-
                 relationships or connections between these models,            ture. In the context of MoF, MoC, and MoB, functors
                 capturing the mappings or transformations between             could be used to translate between different models
                 them.                                                         or representations, while natural transformations could
               • Composition: Composition of morphisms represents              represent higher-level transformations or modifications.
                 the composition of transformations or mappings            5) Compositionality:Thecompositionalnatureofcategory
                 between different models of computation.                      theory, where morphisms can be composed to form
                 In this category, we can study the relationships,             new morphisms, is highly relevant in the context of
                 similarities, and differences between SDF, HSDF,              MoF, MoC, and MoB. This can model the composition
                 and CSDF models. We can analyse the morphisms                 of functions or behaviours in a system, and reflects
                 between these models, investigate the composi-                the compositional nature of software and systems
                 tionality and composability properties, and explore           design.
                 categorical constructions that capture the interac-       6) Yoneda Embedding: The Yoneda embedding, a concept
                 tions and transformations within this collection of           in category theory, says that a category can be fully
                 models.                                                       embedded(i.e.,faithfullyrepresented)withinacategory
              Note: In all the provided examples, it is assumed that           of functors defined on it. This gives a powerful way
              each object possesses an identity morphism, signifying           to represent and work with the category, and in the
              the identity transformation or mapping of an object onto         context of MoF, MoC, and MoB, could provide a new
              itself. Additionally, we take for granted that both the          perspective or approach to these models.

         VOLUME11,2023                                                                                                         116315
                                                                                     T. Mohammadat: MoD for Computing Systems: A Categorical Approach

             Definition 5. Model of Extra-Functional Specifica-                in MoS, thereby capturing the relationships or transforma-
             tions (MoX)                                                       tions between different models of specifications.
             LetMbeacategorythatencapsulatestheextra-functional                   The definition of this functor allows extra-functional
             characteristics of a computational system within a                specifications to be applied selectively to specific parts of the
             given abstraction space. A model of extra-functional              functionality in a rigorous, category-theoretic manner, thus
             specifications is hereby defined by the category M:               maintaining soundness and integrity of the whole system’s
                • Objects: Constituting the set χ, these objects               specification.
                  represent individual extra-functional variables,                In a less formal language, we are taking our functional
                  each demarcating distinct facets of non-functional           specifications (the bits that tell us what the system does) and
                  attributes inherent to the computational system.             our extra-functional specifications (the bits that tell us under
                • Morphisms: Represented by functions, these cap-              what conditions the system operates and what constraints
                  ture the dynamic interplay and transformative rela-          it needs to satisfy). We then combine these specifications
                  tionships between the extra-functional variables.            to form a complete model of the system’s specifications.
                  Specifically, for any pair of variables χ ,χ        ∈        This process of combining can be selective – we can choose
                                                               1   2           to apply certain extra-functional specifications to particular
                  χ, the collection of morphisms is denoted as                 partsofthefunctionality.Themathematicsofcategorytheory
                  Hom (χ ,χ ).
                       M 1 2                                                   gives us a robust and formal way to do this, ensuring that our
                Withinthiscategoricalframework,theextra-functional             model remains consistent and coherent.
             variablescoalescetodefinetwodistinct,yetinterrelated,             Remark 15 (Considerations for the scope of MoX).
             aspects:                                                             • Extra-functional specifications can comprise environ-
                • The environmental preconditions under which the                    mental constraints such as the input stimuli and output
                  design operates, denoted as ϑ.                                     loading/connections in addition to external factors
                • The constraints and regulations imposed upon the                   that affect the system/design operation. This includes
                  design, either holistically or partially, represented              operating conditions that affect the evaluation of the
                  byϱ.                                                               system performance such as ambient conditions within
             Asasynthesis, the category M is inherently associated                   the design and its settings that affect the design
             with this ensemble of conditions and constraints,                       performance/cost.
             articulated as: MoX(χ) : ϑ ∪ ϱ.                                      • Extra-functional specifications can describe additional
                                                                                     constraints that restrict the functional or architectural
             With this categorical representation, the ‘model of                     or implementation constraints. This is useful to further
          extra-functional specifications’ can be understood as the                  restrict the functional model or architectural or imple-
          category M, where the objects are the extra-functional                     mentation models.
          variables χ and the morphisms represent the expressions                 • Extra-functional specifications can describe physi-
          operating on these variables. The expressions collectively                 cal/business/mechanical characteristics and intents that
          describe the extra-functional specifications that the design               are needed or desired for the design. Some industrial
          implementation needs to consider, encompassing both the                    application domains include these aspects in system
          ambient/environmental conditions ϑ and the design con-                     specifications or requirements.
          straints/rules ϱ applicable to the entire or part of the design.     Remark 16 (On Time-Aware Programming Languages).
          To explain this further, consider a system where we have             Some programming languages, such as SystemC, the simu-
          functionalspecificationsdepictedbyamodeloffunctionality              lation subset of VHDL, synchronous languages like Esterel,
          (MoF)andextra-functionalspecificationsdefinedbyamodel                andtheprogramminglanguagesISO/IEC8652/9899ADA/C
          of extra-functional specifications (MoX). These are captured         with real-time extensions (accompanied by the Ravenscar
          as objects in the model of specifications (MoS), formalised          profile or real-time operating systems), incorporate explicit
          as the pair ⟨MoF,MoX⟩.                                               time constructs like wait time seconds. Such lan-
             To express the application of extra-functional specifica-         guagesextendbeyondpurelyfunctionalmodelsbecausethey
          tionsonspecificpartsoffunctionality,onecouldconceivethe              incorporate awareness of temporal dimensions of the ‘real
          model of extra-functional specifications (MoX) functor that          world’ independent of the computing machines.
          maps from the category of the model of functionality (MoF)              In addition to temporal aspects, there are properties from
          to the category of models of specifications (MoS). This func-        the real world, such as energy dissipation, temperature,
          tor can be defined to selectively apply the extra-functional         and other physical events in cyber-physical systems, which
          specifications to the functional model.                              are not inherent aspects of computation per se, but arise
             Let Spec : MoF → MoS denote this functor, which                   when implementing computation on tangible hardware.
          maps an object f in MoF to an object Spec(f) = ⟨f,MoX⟩               These extra-functional aspects are encapsulated within
          in MoS. This functor can also map a morphism g : f           → extra-functional models as they deal with elements external
                                                                     1
          f  in MoF to a morphism Spec(g) : Spec(f ) → Spec(f )                to the (pure) function of the computation.
           2                                              1             2

          116316                                                                                                                  VOLUME11,2023
             T. Mohammadat: MoD for Computing Systems: A Categorical Approach

                Consequently,          programming languages with spatio-                              2) ARCHITECTURE
             temporal awareness offer more than ‘just’ functionality; they                                Definition 6. Model of Architecture (MoA)
             serve as specification models incorporating both functional                                  A model of architecture A is a category formalised
             andextra-functionalproperties.Thismakesthemparticularly                                      to represent the architectural aspects of computational
             adept at modelling real-world systems where both the                                         systems within a designated abstraction space. The
             computations (functional aspects) and the conditions of their                                constituents of A are delineated as:
             implementation (extra-functional aspects) matter.                                                • Objects: Each object within A is denoted by the
             Example5(MoX).                                                                                      tuple ⟨I ,C ⟩. Here, I             characterises interfaces,
                 • System abstraction space: An MoX can comprise                                                            p    p               p
                    requirements for χ for low-power design minimising                                           which depending on the abstraction level, may be
                                              i                                                                  understood as ports (in SL abstraction), pins (in
                    average power consumption for component x and χ
                                                                                               j                 RTabstraction), nodes (in C abstraction), or points
                    specification regarding throughput per application, θ
                                                                                              a                  (in P abstraction). Conversely, C                   encapsulates
                    such that it is not below a specific threshold 2 as                                                                                          p
                                                                                                                 parameterisable components, either hardware or
                    follows:                                                                                     software in nature, interlinked by interfaces C ,C
                                                                                                                                                                                i    o
                                                                                                                 such that C ,C ∈ I .
                      χ : min(P(x))argminP(x) = {x | P(x) = minP(x′)}                                                           i    o      p
                        i                                                        x′                           • Morphisms: These capture the interactive dynam-
                                          x∈ x ,x
                                             ( i  j]                                                             ics between architectural elements. Specifically,
                      χ : argmaxθ(x), θ(x) > 2
                        j                                    x                                                   they are represented by G , a collection of labelled
                                 S                                                                                                                  c
                             ∀x∈ a                                                                               directed graphs. The edges within each graph,
                                                                                                                 C ×I ∪I ×C , are governed by established
                    Andanextra-functionalspecification,χk,describingthe                                            p       p      p        p
                    junction temperature is the temperature allowed at the                                       compositional rules and denotations, ensuring the
                    processor die µC to be designed for −55 to 125◦ C.                                           fidelity of both the syntax and semantics of the
                                                                                                                 architecture’s representation.
                                      χ : −55◦ < T(µC ) < 125◦                                                Expressedsuccinctly,themodelofarchitectureAcan
                                        k                       x                                         be described by the tuple:
                    An example of system, S that shall be satisfying                                                                 A:⟨I ,C ,G ⟩
                    or complying to a set of safety rules described in                                                                       p     p    c
                    industrialstandardsOSI26262/ARP4754A/ARINC653                                             A language of model of architecture, denoted as
                                                                                                          L      ,  is a modelling language given by the tuple
                    /IEC61508 donated by 3, can be described as: S ⊢ 3                                      MoA
                                                                                                          L       =⟨6          , G      , S      ⟩, where:
                 • RT abstraction space: Synopsis design constraints                                        MoA           MoA      MoA      MoA
                    (SDC) and unified power format (UPF,IEEE1801)                                             • 6MoA is a finite set of strings formed over
                    can be considered examples of models used to                                                 an alphabet which encapsulates the architectural
                    caputure extra-functional specification exemplified by                                       constructs. Each string in 6MoA represents a
                    timing/performance, power/energy, and area (PPA) for                                         well-formed architectural description, which may
                    RTL. Such constraints restrict the implementation of                                         include constructs such as interfaces (represented
                                                                                                                 as I ), parameterisable components (C ), and
                    the functional/behavioural models and can impose                                                   p                                                   p
                    extra requirements on the behaviour, architecture,                                           relationships (given by the labelled directed graphs
                    implementationofthesystem,andthedesignrulesused.                                             Gc).
                    This includes for example clock/area/power (timing/                                       • GMoA is a grammar defined as GMoA                                  =
                                                                                                                 ⟨α      , V       , P      , S     ⟩, where:
                    synchronisation) constraints, input/output delay/load                                           MoA      MoA      MoA      MoA
                                                                                                                 – α         is a finite set of terminals or symbols that
                    constraints, environmental constraints, design rules                                              MoA
                    constraints, technology constraints. The MoX can fur-                                           represents architectural primitives such as ports,
                    ther be per-component constraints for the architecture/                                         pins, nodes, or points.
                                                                                                                 – V         is a finite set of variables distinct from
                    implementationoratthedesign/systemlevelconstraints                                                 MoA
                                                                                                                    α        that might denote more complex architec-
                    concerning turn-around time or accuracy or operating                                              MoA
                    conditions. Examples include: environmental (MoX):                                              tural structures.
                                                                                                                 – P         is a set of production rules, translating
                    set_operating_conditions,             set_load/drive/driving_cell/                                 MoA
                    fanout_load         input_transition/          port_fanout_number,                              architectural constructs into meaningful design
                    design rules (3), set_max_capacitance/ fanout/ tran-                                            descriptions.
                                                                                                                 – S         ∈ V         is the start variable that initiates
                    sition, timing: wireload models set_wire_load_mode/                                               MoA          MoA
                    model/selection_group, create_clock /generated_clock,                                           the architectural descriptions.
                                                                                                              • S        providesamappingfrom6                      to the seman-
                    set_clock _latency/ transition, clock_uncertainty input/                                       MoA                                        MoA
                    output_delay,power:set_max_leakage/dynamic_power                                             tics associated with each architectural description,
                                                                                                                 thereby attributing meaning and context to the
                Moreexamplesforhowtospecifyextra-functionalproper-                                               representations in 6MoA.
             ties formally are in [22] and [23].

             VOLUME11,2023                                                                                                                                                       116317
                                                                                  T. Mohammadat: MoD for Computing Systems: A Categorical Approach

            In this category, the subscript p indicates possible param-     might be depicted through hierarchical graphs such as daisy-
          eters. G   denotes that components can be hierarchical,           chains, stars, trees, meshes, and toruses, whilst interfaces can
                   c
          nesting other components and/or MoAs. The model of                capture hardware/software component interactions. Exam-
          architecture aligns with the structural domain within the         ples include the OMG’s interface definition/description lan-
          Gajski-Kuhn Y-Chart and resides within the abstraction            guage(IDL)[24],[25],applicationprogram/binaryinterfaces
          spaces A, as outlined in Foundational Construct 2. This           (API/ABI), and various interconnection protocols. Across
          corresponds to the platform-independent models (PIMs) in          different abstraction spaces, topologies can transform their
          the OMG’s model-driven architecture (MDA) terminology             meanings; for instance, in the system space, topologies
          at the system or transaction-level abstraction space and to       might represent logical connections or data flow between
          the technology-independent generic logic libraries in logic       subsystems, whereas at the physical space, they might focus
          synthesis at the RT. MoA acts as a bridge, easing transitions     oninterfaces and isolation, considering factors such as signal
          from the S/T Space to the RT Space, or from the RT                integrity or 3D and 2.5D IC packaging.
          Space to the C Space. The architectural model brings forth        Remark 20(Time-triggered architectures (TTA)). Time trig-
          concepts such as meet-in-the-middle and platform-based            gered (and spatiotemporal in general) architectures combine
          design, model-driven architecture, and more. Architectural        the connectivity of components with the explicit notion of
          elements and design are pervasive in embedded hardware            time (and space). Time (and spatiotemporal) architectures
          andsoftwareindustrialsectors,asevidencedinstandardslike           are special cases of our notion of MoA at the physical
          DO-178Cforavionics and AutoSAR for automotive.                    space. Generally, TTAs do not match MoA in other spaces
          Remark 17 (MoAsandMoFs).                                          directly, as MoA attempts to remain general enough to
             • Architectures, in the broadest sense, are employed to        encompass implementation models across various levels of
               describe abstract relations between hardware elements,       abstraction that could be virtual, emulated, or software-
               as seen in computer organisation and architecture (more      intensive; which does not necessarily require explicit notions
               suited for MoAs). Alternatively, they depict software        of space/time/energy; or at least not in a consistent manner.
               modules, classes, or entities and their interfaces in        See also Remark 21 for further insights.
               software engineering, akin to software architecture          Remark 21 (MoA and evaluation models). The inclu-
               (more apt for MoFs).                                         sion of extra-functional related properties in architectures
             • The distinction between MoA and MoF blurs when               can be useful, but in our work, we attempt to separate
               considering the instruction set architecture (ISA) where     the architectural concerns/aspects (MoA) from the eval-
               hardware and software intermingle. From a hardware           uation concerns/aspects (see Definition III-A4 on model
               standpoint, instructions are decoded in the instruction      of evaluation, MoE). In principle, we view architectures
               decoding logic within computer architecture; hence, the      as technology-independent and platform-independent while
               instructionsetcanbepartofthecomputer’sarchitectural          useful evaluation metrics should be technology-dependent
               MoA. From a functionality perspective, ISA indicates         andplatform-specific, hence We argue that evaluation should
               the range of functional behaviours that encapsulate the      beapplied to the implementation and not to the architecture.
               system’s functionality, placing it within MoB (∈ MoF).       Remark 22 (On the behaviour, interaction and priority
          Remark 18 (The Role of Parameters in MoA). The param-             (BIP) framework). The BIP framework [26], is used to
          eterised nature of the model of architecture facilitates the      reason about compositionality using a component-based
          configuration of architectural components across abstrac-         design/construction approach. As the framework primarily
          tion spaces. By deliberately incorporating parameters into        defines atomic components and glue operators that can be
          the architectural model, various configuration and mode           used to compose other complex components comprising the
          parameters for both software and hardware components and          system; the framework can be perceived to be compliant
          interfaces can be defined across different abstraction levels.    with our notion of MoA, as atomic/composite components
          This is advantageous in situations where parameters enable        can map to our notion of component, glue operators can be
          diverse design trade-offs both vertically (across varying         subsumed within our notion of categorical functor or graph
          complexitylevels)andhorizontally(basedoncomponentand              in addition to the overall grammar (syntax) and semantics of
          interface choices). For instance, processor architectures can     the model.
          encompassdifferent instruction sets and micro-architectures.      Example 6 (Architectural components and interfaces).
          Operating systems can manifest in varied configurations,             • At system space: hardware and software typically
          customisations, builds, and architectures. Parameters eluci-           possess distinct architectures. When integrated, they
          date why identical architectures with differing settings yield         form a comprehensive system architecture:
          diverse platforms. These parameters also resonate with the             – A common hardware architecture encompasses pro-
          notion of platform/system configuration.                                  cessor cores, which may include cache systems from
          Remark 19(TopologiesandInterfacesinMoA). Byincorpo-                       vendors like Intel, AMD, and ARM; memory storage
          rating interfaces and graphs directly, we aim to highlight the            suchasNANDflash,scratchpads,DDRDRAMs,and
          architecture’s topologies and interconnections. Topologies                SRAMs; I/O device adaptors suitable for displays,

          116318                                                                                                             VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

                 audio, GPS, motion actuators, and instrumentation         a head (encompassing a memory input/output controller,
                 sensors; and both on-chip and off-chip interconnects,     program pointer, and logic unit), and a tape (memory)
                 examples being PCIe, NoCs, various AMBA fabrics,          containing possible instructions and data (program and data).
                 Intel Avalonfabric,SerDes,USBvariants,SDIO/I2C,           In this context, if we consider the computing machine
                 SPI, UART, eMMC, and a range of networking                without the actual content of the tape, it becomes a model
                 protocols.                                                of architecture, representing only components and their
               – A typical software architecture comprises board           operational semantics. However, when given specific tape
                 support packages (BSP) and firmware/BIOS; device          content, the machine embodies a model of functionality or
                 drivers for USB, Display, and other I/O; kernels for      behaviour upon a model of architecture, where the tape’s
                 OS, RTOS or hypervisor, incorporating scheduler,          content (program) signifies a subset of potential behaviours
                 process managers, memory managers, and other              or functionalities.
                 essential functionalities; and application program-          To illustrate this relation, consider a Turing computing
                 ming/binary interfaces (API/ABI). For automotive          machine, TM, defined as the tuple ⟨Q,q0,L,b,6,δ,F⟩,
                 applications, EAST-ADL and AutoSAR may repre-             comprising:
                 sent the MoA architecture at the system space for            • AsetL ofsymbolsthatTM’stapescanhold.Weassume
                 software.                                                      that L includes a specific ‘‘blank’’ symbol, denoted by
            • AttheRTabstractionspace:Genericgate-levellibraries,               b, a ‘‘start’’ symbol, represented as S, and various other
               described in a structural style of Verilog, cater to nets,       symbols. We refer to L as TM’s alphabet.
               cells, pins, ports, and clocks for logic synthesis. These      • 6 ⊆ L −{b}represents the input symbols permitted on
               standard-cell libraries can be considered as models              the initial tape content.
               of architecture for many logic computer-aided design           • AsetQofpotentialstatesforTM’sregister.Itisassumed
               (CAD) synthesis tools. On the other hand, IP XACT                that Q contains a specific start state, q0 ∈ Q, and a
               (IEEE1685/IEC62014)isviewedasanMoAlanguage.                      halting state, qhalt ∈ Q. F ⊆ Q, represents the final
               With such architectural languages, architectures can be          states (or accepting states) with F = {qhalt}.
               refined for various features, including testability, power     • Afunctionδ : (Q−F)×L 7→ Q×L×{l,S,r}delineates
               management, and reconfigurability.                               the rule by which TM operates at each step. Known as
            • At the circuit space: Custom integrated circuit (IC)              TM’s transition function, the head can move Left (l),
               models use circuit components like transistors, metal            Right (r), or Stay in place (S). The machine halts if the
               vias, and interconnects. These models, described in              transition function is undefined for the current state and
               ‘library exchange format (LEF)’, are predominant                 symbolonthetape.Ifthemachineattemptstomoveleft
               examples of architectural component models employed              from the tape’s leftmost position, it remains stationary.
               in custom IC flows such as Cadence Virtuoso.                Fromthis example, the TM model can be interpreted as:
            Utilising these fundamental constructs of components,            1) An architecture comprising components: a tape (mem-
          interfaces, and graphs facilitates the creation of diverse            ory) linked to a head (a memory controller connected
          hardware/software architectures, ranging from transistor              to a program counter) at a specific position, with the
          scale to supercomputing neural networks. For instance,                transition function acting as the control unit with an
          a typical bus-based MPSoC architecture designed for custom            instruction decoding unit.
          heterogeneous shared-memory could involve components               2) By suitably encoding the symbols in the tape (L) to
          such as Caches, RAMs, and multi-threaded CPU decoders,                representcomputation,themodel,whenviewedthrough
          among others. By integrating 2-D NoC graphs of these                  the contents populated on the tape, can primarily be
          training nodes and low-latency switches, expansive archi-             perceived as a model of functionality. The potential
          tectures like the ‘Dojo’ can be formulated. Furthermore,              content sequences encoded by the tape can correspond
          the open systems interconnection (OSI) for networks and               tobehaviouralcomputations.Theassociatedoperational
          Flynn’s taxonomy for computer architecture [27] can be                semantics is the model of functionality (MoF) com-
          viewed as subsets of the classification of MoA for computers          prising one process. The machine, minus the tape,
          and networks. A reduced instruction set computer (RISC)               simplyprovidestheoperationalsemanticsdescribingthe
          stands as an example of a MoA across multiple levels of               process output generation.
          abstraction. Moreover, in computer science, certain concepts,      3) A third perspective suggests that the machine, with
          from circuits in terms of logic gates to Turing machines, are         designated contents on the tape, symbolises a func-
          classified under architectures as they describe the grammar           tional behaviour mapped onto architectural components
          and semantics of computational machines.                              (MoFxMoA).
          Example 7 (Relation of computing machines to models of
          architecture and functionality). Computing machines, such        3) IMPLEMENTATION
          as finite state machines, push-down automata, and abstract       A representation of an implementation (implementation
          computing machines, typically comprise a state (register),       model) is the result of partial or complete design process.

          VOLUME11,2023                                                                                                           116319
                                                                                   T. Mohammadat: MoD for Computing Systems: A Categorical Approach

          The implementation model is not the same thing as the
          (physical) implementation, as it is often that some additional          Design decisions encapsulate an assembly of
          manufacturing or (virtual) prototyping or deployment effort           decision-making      algorithms,     frameworks,      and
          can be needed to realise the implementation model. This               actions. These decisions articulate diverse actions
          is common for integrated circuits and systems-on-chips                like  architectural  selection,  hierarchy   elaboration,
          manufacturing; discrete circuit assembly on printed circuit           topology configuration, component inference, routing,
          boards or racks on modules for electronic controllers units;          resource allocation, partitioning, mapping, scheduling,
          or burning-in device images/binaries on field-programmable            configuration, planning, and variable dimensioning.
          gate arrays or processor-based emulation systems and virtual          Central to this definition, design decisions can be
          prototypes. Before we can move further in the definitions,            perceived as a linguistic structure, offering syntax and
          we explain the concepts: refinement and abstraction as                semantics for capturing, conveying, and executing
          general operators on models; in addition to design rules.             decisions. This linguistic view underpins the process of
                                                                                refining abstract models into tangible implementations.
             Definition 7. Refinement and Abstraction
             Refinement: Let MA.s be a model within a model of                  The categorical     interpretation  of   design   decisions
                                 τ.e                               A.s
             design (MoD). Refinement is a functor that takes M              establishes   a category functor C between categorical
                                                        ′ A+i.s+j  τ.e
             and transforms it into a new model Mτ.e             , for       objects   corresponding to different models or refined
             any i,j ∈ N0 such that i + j > 0. This process of               models of specifications, architectures, or implementa-
             refinement adds further detail to the model, progressing        tions. The morphisms in C embody the decision-problem
             from higher to lower levels of abstraction. Abstraction:        algorithms transforming an input model into an out-
             Let MA.s be a model within a model of design (MoD).             put model, reflecting the transformation or refinement
                    τ.e                                     A.s
             Abstraction is a functor that transforms Mτ.e into a            process.
                            ′  A−i.s−j
             new model M              , for any i,j ∈ N0 such that
                            τ.e                                              Example 9 (Design Decisions).        • Examples of design
             i+j > 0.Throughabstraction,detailsareremovedfrom                      decisions at the system space may include: processes
             the model, leading to a higher level of abstraction.                  to processing core mapping, infinite channels synthesis
                                                                                   to finite point-to-point buffers or multi-secondary
          Example 8 (Refinement and Abstraction). Refinement and                   multi-primaryinterconnectfabricsandpacket-switching
          abstraction comprise various transformations, inferences,                networks, instruction-set selection for behavioural
          or design steps that alter the level of abstraction in models.           synthesis, processor architecture selection, cache and
          Examples may include elaborating design specifications to                memory sizing, memory hierarchy selection, applica-
          unfoldhierarchies, spatially mapping an abstract behavioural             tion to virtual partition mapping (e.g. in aerospace
          specification to more detailed architectural processing ele-             ARINC standards), partition scheduling, runnable to
          ments, or transforming specification formats from a more                 tasks mapping (e.g. in automotive standards such as
          abstract language to a more detailed one (compilation and                AutoSAR), scheduling algorithm selection (e.g. in real-
          synthesis).                                                              time systems such as preemptive scheduling, earliest-
                                                                                   deadline first, etc.), networks topology selection,
             Definition 8. Design Decisions (1)                                    time-division multiplexing sizing (e.g. in TDMA-based
             Let M = ⟨MoS,MoA⟩ be a source category                                cross-bars and network-on-chips or in AFDX avionics
             where objects represent either models of specification                network), switching mechanism selection.
             or models of architecture, and morphisms denote                    • Examples of design decisions at the RT space of
             transformations between these models. Let I be the                    abstraction:forarchitecturaldesigning,i.e.movingfrom
             target category with objects representing models of                   specificationtoagenerictechnology-independentarchi-
             implementation. Design decisions, denoted as 1, serve                 tecture, design decisions include: architecture selection
             as a functor:                                                         for arithmetic operators, logic pruning, carry-save arith-
                                  1:M→I                                            metic, constant propagation, logic speculation, resource
                                                                                   sharing, (non-functional) redundancy removal (espe-
               This functor maps:                                                  cially when specific reliability is not an extra-functional
              1) ObjectsinMtoobjectsinI,translatingorrefining                      requirement), finite state machine control logic encod-
                  specifications and architectures into implementa-                ing,multiplexer/arithmeticoptimisation,retiming,clock
                  tions.                                                           gating. Design decision for implementing generic
              2) Morphisms in M to morphisms in I, transmut-                       architecture into technology-specific implementation
                  ing the transformations in source models into                    may include: clock-tree synthesis, floor-planning and
                  correspondingtransformationsintargetimplemen-                    wire routing, multi-bit merging, multi-voltage multi
                  tations.                                                         threshold-voltage scaling for delay and leaking-power
                                                                                   minimisation, multi-mode multi-corner optimisation,

          116320                                                                                                               VOLUME11,2023
         T. Mohammadat: MoD for Computing Systems: A Categorical Approach

              power shut-off, power test access mechanism insertion         into separate decisions for the architecture and the
              for testability.                                              functionality.
            • Examples of design decisions at the circuit abstraction:   3) Reflexivity: Reflexivity in category theory implies that
              transistor sizing, metal-routing, body biasing optimisa-      every object has an identity morphism mapping it to
              tion, buffer insertion for wire delay minimisation and        itself. In terms of design decisions, this can be equated
              sizing for gate delay minimisation.                           to a ‘trivial’ decision, leaving the design unaltered.
            • Examples of metamodels for design decisions include           Related to that is the identity morphism. This refers to a
              Bash/Tcl/SKILL/Yamlgrammar(syntax)andsemantics                particular design decision that, when enacted, leaves the
              usedfordesignflowmanagement,e.g.sequenceofeval-               design untouched, stemming from reflexivity. It is akin
              uation/transformations/designstepsthatapply,pipingof          to choosing to maintain the current design.
              intermediate results, design objects management, and       4) Nilpotent: A nilpotent design decision, when repeated
              visualisation and reporting.                                  or compounded with itself a certain number of times,
         Remark 23 (Refinements, transformations and design deci-           couldleadtoatrivialdecision,effectively‘resetting’the
         sions). In some literature [18], transformations represent         design.
         the primary concept to encapsulate refinements of models        5) Idempotent: An idempotent design decision, upon
         through two means: semantic preserving and semantic non-           repeatedapplication,resultsinnofurtherdesignchanges
         preserving transformations, wherein design decisions are           beyond its initial influence. Such decisions can set a
         perceivedinthiscontextassemanticnon-preservingtransfor-            particular design feature to a fixed state.
                           ®                                             6) InverseTransformation:Here,aninversetransformation
         mations. In OMG      model-driven architectures, model-to-
         modeltransformationsserveastheprimarymethodsofmodel                would reverse the effects of an initial decision when
         manipulation, in the broadest sense. In EDA, and specifically      appliedsubsequently,restoringthedesigntoitsprevious
         in RT and TL, synthesis and compilation are the prevalent          state.
         terms used to bridge the abstraction/refinement gaps from       7) Products: In category theory, a product of two objects
         specifications to implementations. Within the MoD concept,         captures their ‘shared information’. In the realm of
         the decision was made to position design decisions as the          design decisions, a product might signify a collective
         overarching concept, encompassing transformations, com-            decision affecting two subsystems or design compo-
         pilation, synthesis, satisfaction and optimisation problems.       nents. This ‘product decision’ would embody decisions
         Wethinkthat ‘designing’ is the central activity here, leading      made at the intersection of these components, with the
         to the choice of using the term design decision as an umbrella     morphisms (decisions) for each component detailing its
         concept for these optimisation, model transformations, and         respective impact.
         refinement activities. This includes variable assignment        8) Coproducts: Representing the ‘sum’ or ‘union’ of
         algorithms, as seen in multi-objective optimisation and            objects in a category, a coproduct decision in design
         satisfaction problems, in addition to semantic-preserving          could merge independent decisions concerning distinct
         and semantic-non-preserving endogenous (intra-language)            design components. Such a decision influences each
         and exogenous (inter-language) transformations.                    component independently, with the cumulative design
            From a categorical perspective, transformation, abstrac-        impact being the ‘union’ of effects on individual
         tion, and design decisions can exhibit several properties often    components.
         associated with morphisms in a category. Let us discuss each    9) Limits and Colimits: In category theory, when we say
         of these properties:                                               a diagram ‘commutes’, we mean that there exist unique
                                                                            paths that lead to the same outcome, regardless of the
           1) Commutativity: Within category theory, commutativity          route taken through the diagram. Limits and colimits
              often describes diagrams where morphisms can be               are notions central to this idea. The limit captures the
              composed in varying orders, leading to the same result.       ‘smallest’objectoverwhichagivendiagramcommutes.
              Relating to design decisions, this property suggests that     In the context of design decisions, this could be
              certain decisions, when made in different sequences,          interpreted as the minimal set of decisions necessary
              can still culminate in the same overall system design.        to implement a specific design feature. Conversely,
              Nevertheless, it is crucial to recognise that not all         colimits can be viewedasindicatingthemaximaldesign
              design decisions are commutative, as the sequence             impact achievable when a certain set of decisions is
              of decision-making can influence the final design             applied.
              profoundly.                                               10) Monoidal Construction: A monoidal construction inte-
           2) Distributivity: For design decisions, distributivity could    grates a bifunctor (a functor of two arguments) denoting
              mean that a combined design decision (a series of             a ‘tensor product’ operation and a unit object serving
              individual decisions) can be consistently distributed         as this operation’s identity. Regarding design decisions,
              across various facets of the system design. For instance,     a monoidal category might depict the structure of
              a joint decision to refine both the system architec-          amalgamating decisions (via the tensor product) and
              ture and functional specification might be segregated         the existence of a ‘do nothing’ decision acting as this

         VOLUME11,2023                                                                                                      116321
                                                                                    T. Mohammadat: MoD for Computing Systems: A Categorical Approach

               operation’s identity. It offers a structured way to reason           IPC-A-610, IPC-A-620, IPC-6012, IPC-7711/21, IPC-
               about the amalgamation and sequencing of design                      7251, IPC-7351.
               decisions.                                                        Designrulesoftenemergeasextra-functionalrequirements
                                                                              identified during design steps once a particular implementa-
             Definition 9. Design Rules (3)                                   tion is selected. These rules tend to be specific to platform
             Let M = ⟨MoS,MoA⟩ be a source category                           vendors and manufacturing foundries, acting as a feasibility
             where objects signify either models of specification             assessment for the design. Design rules can be equated with
             or models of architecture, and morphisms represent               contracts in a contract-based design, wherein the criteria for
             transformations between these models. Let I be the               design correctness are articulated.
             target category with objects characterising models of
             implementation. Design rules, denoted by 3, is posited              Definition 10. Model of Implementation (MoI)
             as a functor:                                                       Let I be a category where objects encapsulate the
                                   3:M→I                                         various characteristics of system implementations, and
                                                                                 morphisms depict transformations and interactions
               This functor maps:                                                between these implementations. Within this categorical
                • Objects in M to constraints in I, refining the                 context, the model of implementation (MoI) can be
                  implementation to adhere to the stipulated rules.              construed as a formal modelling language, bearing
                • MorphismsinMtomorphismsinI,conveyingthe                        similarities to both conventional programming and
                  influence of rules on transformations from specifi-            hardware description languages.
                  cations and architectures into implementations.                   An object in I represents a parameterisable imple-
               Design rules, encoded in a coherent linguistic struc-             mentation,compatiblewitharefinedmodeloffunction-
                                                                                           ′                                      ′
             ture, stipulate the requisite conditions a design must sat-         alityMoF ,arefinedmodelofarchitectureMoA ,design
             isfy to ensure its correctness. This linguistic perspective         rules 3, and extra-functional specifications (MoX).
             provides a framework for capturing, interpreting, and               Formally, this association can be expressed as:
             deployingrules.Whencoupledwithdesigndecisions1,                                   ′        ′
             theserulesofferapivotallayerofinterpretation,guiding                 MoI:⟨MoS ×MoA⟩
             therefinementoftheMoSandMoAtoyielda‘‘correct’’                       s.t. MoI |H MoA |H MoS
             implementation in the MoI. In specific design contexts,               & MoI⊢3∪MoX                             MoF×MoA:
             such rules can be collectively referred to rules deck.               P ×C ,(I ∈MoF)×(I ∈MoA),
                                                                                   p      p   p              p
             From a categorical perspective, design rules can be repre-           (Gh ∈ MoF)×(Gc ∈ MoA)
          sented in a category, C, as follows. The objects in C correlate        Here,|Hand⊢shouldbeinterpretedasmodelsandsatisfies
          to the various elements of the design system, including
          specifications, architectures, evaluations, design decisions,       respectively.
          and implementations. The morphisms in C denote the                  Remark 24 (Refinement and derivation of a MoI). The term
          composition grammar or rules, defining how these elements           refined highlights the distinction between the original models
          interact and combine. This formalisation encapsulates the           andtheirsubsequentversionsintheimplementation.TheMoI
          relationships and rules among different design components.          pertains to the ‘physical/geometric’ domain of the Gajski-
          Therulesensurethevalidityandcomplianceofthedesignby                 Kuhn Y-Chart or the platform-specific model (PSM) in the
          offeringconstraintsforthecomponentsandtheirinteractions.            OMG’smodel-drivenarchitecture(MDA)terminology.Gen-
          Example 10 (Design rules). Examples of design rules                 erally, the technology, platforms, or target implementation
          include:                                                            libraries constitute the model of implementation.
             • System/Transaction Space: Spatial and temporal isola-          Remark 25 (Functional-architectural mapping and imple-
               tion criteria for hypervisor partitioning in mixed-critical    mentationcomplexity). Thedesignspace,oftenreferredtoas
               systems.                                                       the implementation space, emerges from mapping functional
             • RT Abstraction: Low-power design rules, design-for-            capabilities to architectural opportunities, guided by valid
               testability rules.                                             mappings (design rules and composition grammar/syntax).
             • Software: Programming guidelines such as MISRA-                The complexity of this space can escalate swiftly for
               C:2004 for C programming language.                             cross-space designs due to the exponential growth of
             • Circuit     Space:     Electrical    rules,    design-for-     possibilities at each abstraction level. To control this, it is
               manufacturability (DfM) rules, design-for-yield rules          imperative to restrict the options within each complexity
               (DfY), antenna rules, rules for electrostatic discharge        domaintoalevel that facilitates optimal results.
               (ESD)andelectro-migration (EM).                                Example 11 (Examples of MoIs).        1) Withfunctionalspec-
             • Physical Space: IPC rules for manufactured printed                   ifications in RT abstraction space defined using the
               circuit boards such as IPC J-STD-001, IPC-A-600,                     synthesisable subset of VHDL and extra-functional

          116322                                                                                                                 VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

                specifications like multi-mode multi-corner (MMMC)
                or Synopsys design constraints (SDC), and an architec-                 that stipulates the specific procedure and relation-
                tural netlist of standard cells in Verilog, the MoI might           ships required for evaluating both the functional and
                be a GDSII/OpenAccess implementation supported by                   extra-functionalpropertiesofamodelofimplementation
                foundry-specific PDK and LEF files.                                 (MoI). This evaluation seeks to answer the question:
            2) Starting with an (MoF, MoA) pair such as ((SystemC,                  ‘To what extent does the MoI satisfy the model
                Synchronous dataflow MoC), LSLA in AADL), the                       of specification (MoS)?’, which can be symbolically
                MoI might consist of C programmes, an implementa-                   represented as: MoI |H MoS? The MoE serves as a
                tion of the Synchronous dataflow MoC with limited                   functorinthecategoryofmodeldesign,transformingthe
                buffers, and a shared memory bus system detailed                    MoItoassessitsadherencetotheMoS.Inmathematical
                in AMD/Xilinx microprocessor hardware specification                 terms, this can be expressed as:
                (MHS) compatible formats. Here, MoC and MoA                                           MoE:⟨MoI⟩→MoS
                denote the models of computation and architecture,
                while MoX embodies extra-functional specifications                  Furthermore, when we elaborate on the components
                such as latency and area footprint.                                 of the extra-functional specifications (MoX), the MoE
          4) EVALUATION                                                             morphismcanalsobeexpressed as:
                                                                                             MoE:⟨MoI⟩−−−−→ϱ∈MoX∪MoF
             • Evaluation within design processes can be encountered                                        ϑ∈MoX
                in many different stages:                                              In this context, ϑ represents a given element within
                1) before design for early feasibility assessment                   theMoX,whileϱsignifiestheresultantevaluationofthe
                2) during design for making design decisions and                    MoX,whichiscombinedwiththemodeloffunctionality
                   design space exploration                                         (MoF) to provide a comprehensive evaluation of the
                3) after design to verify the design outputs, including             MoI.
                   verification exercises,
                4) after implementation/manufacturing to diagnose and               An alternative categorical counterpart for the model of
                   troubleshoot problematic designs.                             evaluation (MoE) as a category can be described as follows:
             • Evaluationmodelscanexistacrossthedifferentabstrac-                   Let C be a category that represents the model of
                tion spaces in the physical abstraction space where              evaluation. The objects in C correspond to the different
                thermodynamics and electromagnetic interference are              implementations, denoted as MoI, at a specific level/space
                analysedinprintedcircuitboardsandmodules.Incircuit               of abstraction. The morphisms in C represent the evaluation
                abstraction space, evaluation models are used to assess          procedures and relationships that map an implementation
                transient effects, steady-state conditions, variability, and     to the corresponding specifications, denoted as MoS. This
                noiseanalysisinadditiontorandomstochasticprocesses               categorical description provides a framework for studying
                analysis. In RT abstraction space, static timing analysis        the evaluation of implementations and their correspondence
                and average power are predominant in digital circuits.           to specifications. It allows for the formal analysis and
                In system space, functional safety, and performance are          verification of functional and extra-functional properties,
                among the few relevant characteristics of commercial             aiding in the assessment and validation of the design.
                and industrial products and systems.                                The evaluation model in Definition III-A4 does not seem
             • Evaluation models can include the formal verification             to include the case of executable specification, where one
                and functional simulation of functionality, e.g. equiva-         can simulate the effect of the specifications given a set
                lence checking in addition to the performance and cost           of inputs to check and evaluate whether it provides the
                evaluation or analysis given a point in the design space         right results, i.e. validation of whether we are building the
                that belongs to the implementation. This can include             right thing? Since an implementation model at a specific
                formulasandtheoremsforreal-timesystemsandmodels                  level/space of abstraction can be considered to be the
                ofcomputationsuchasconsistency,liveliness,deadlock,              specification model of the next/subsequent space/level of
                throughput,buffersize,latency,schedulability.Technol-            abstraction, one can still see a notion of the term where the
                ogy, platforms or implementation target libraries such           specification model can be evaluated using the evaluation
                as DEF/LEF that are typically part of the model of                                                     i+1          i
                implementation are also usually shared for the model of          model, by assuming that MoS                ≃ MoI. Evaluation
                                                                                 modelsandotherdecision-makingmodelsmayuseextended
                evaluation for evaluation purposes.                              models iof architecture and specification, or augment
                                                                                 such models to generate design outputs. For example,
             Definition 11. Model of Evaluation (MoE)                            superimposing inputs/loads/power/electric/noise sources for
             Amodel of evaluation is a collection of tools, frame-               system simulation and environmental stimuli to exercise the
             works, or/and methods, which may be composite,                      system in relation to the extra-functional analysis of interest.
                                                                                 Additionally, design decisions and evaluation models can

          VOLUME11,2023                                                                                                                      116323
                                                                                 T. Mohammadat: MoD for Computing Systems: A Categorical Approach

          employ various intermediate languages and procedures to              • At the transaction level or system space: software
          capture different aspects of the design automation processes           processes memory footprint characterisation, execution
          as required.                                                           time characterisation, memory access for transactions,
          Example12(MoEs).                                                       intra- and inter-chip communication time per transac-
            • Simulationmodelsformetaloxidesemiconductorsfield                   tion, baseline system power consumption, system space
               effect transistors (MOSFET) such as BSIM family [28]              failure-in-time characterisation.
               is an example of a MoE with multi-objective evaluation          • At the RT space: fall and rise time output propagation
               functions at the device/physical level.                           delay per gate and per IP, wireload delay, gate area
            • Simulation program with integrated circuit emphasis                characterisation, input and output capacitive/resistive
               (SPICE), such as PSPICE, LTSPICE and Spectre is an                loads for logic gates, toggling rate or switching activity
               example of a MoE with a multi-objective evaluation                probabilities for power estimation. This is apparent
               system at the circuit level.                                      for IEEE 1801 and the corresponding TSV/SAIF/VCD
            • Instruction-set computersimulatorssuchasGem5,Sim-                  annotation framework for power evaluation and the
               ics and ARMulators; virtual simulation platform, such             defacto industry standards ‘.lib’ liberty formats for
               as OVPSim and Imperas OVP populated with power                    timing parameters.
               interception library and ARM A processor models can             • At the circuit space: threshold voltage characterisa-
               be an example of a MoE for instruction/cycle-accurate             tion, constant characterisation of electrical parameters
               functional (and time/power extra-functional) evaluation           of resistors, capacitance and other elemental circuit
               at the transaction level.                                         components, maximum and minimum load per circuit
            • Hardware description language (HDL) functional sim-                component, inductance/capacitive/resistive parasitics
               ulators and static timing analysis engines like Intel             extraction (IEEE 1481).
               QSim,andCadenceXCellium/Tempusareexamples of                    • At the physical space: device reliability, e.g. failure in
               MoE for the behavioural and functional specifications             time of single event upsets, for memory devices.
               at the RT abstraction. Processor-based or FPGA-based
               emulation platforms such as Cadence Palladium or             5) DEVELOPMENT
               Protium can be an example of MoE at the RT for
               evaluation of the functional specification.                  The development of computer applications or systems
            • Logical/Sequence equivalence checking (EC) and par-           typically occurs within the context of engineering projects.
               asitic extraction are examples of MoE that check the         The primary aim of these projects is often to enhance
               equivalence of behavioural specifications in relation to     existing products or technologies or to introduce new ones.
               transformedversionsintheimplementationmodelatthe             As products and technologies mature, they can be described
               RTandlogicabstractions.                                      using different modelling maturity levels or technology
            • Matlab Simulink, OPNet and NoCSim are examples                readiness levels. For instance, within the aerospace industry
               of MoE to evaluate the functional and extra-functional       and referencing NASA’s technology readiness level (TRL),
               aspect of system design at the transaction levels.           a product might be ascribed level 1 when a prototype is built,
                                                                            demonstrating its foundational principles. Conversely, when
                                                                            the product has been proven in an operational environment,
            Definition 12. Characterisation                                 it might attain level 9. To differentiate the design as
            Characterisation of evaluation model, is the pro-               it progresses through extensive developmental stages like
            cess that aims to resolve unknown implementation-               TRLs, we employ the term ‘epoch’. While TRL is a staple
            or technology- or platform-dependant parameters or              in aerospace engineering and research projects, serving as
            attributes or constants.                                        a motivating factor for the introduction of developmental
            Characterisation or Identification (or sometimes called         stages, similar concepts can apply to other sectors. For
          analysis or profiling in the software domain at the system        instance, in other industries, engineering or customer change
          space) is usually a vendor and platform-specific exercise         orders might reflect design modifications which can be
          aims at identifying technology-dependent characteristics          catalogued as shifts along developmental stages.
          necessary for the evaluation of the system such as aver-            Within each extensive developmental stage, computer
          age/best/worstcasecommunication/execution/responsetime.           systems might undergo several smaller, either automated
          In the RT domain, FPGA vendors and foundries characterise         or manual, engineering processes or steps. These steps are
          their technology-specific devices and manufacturing process       sometimes encapsulated by design, development, or process
          (PDK) into corresponding implementation templates and             flows and are disseminated among members of one or more
          datasheetsonthecharacteristicsoftheendproduct(electrical,         engineering teams. Given their relative brevity compared
          mechanical, timing, power, failure-in-time, etc.).                to larger developmental stages, we refer to them as ‘sub-
                                                                            epochs’.Thetimediscrepancybetweenthedesignbeforeand
          Example13(Characterisation). Examplesofcharacterisation           after each of these smaller steps is also termed a sub-epoch.
          or model identification may include:                              From this perspective, sub-epochs represent intermediary

          116324                                                                                                             VOLUME11,2023
              T. Mohammadat: MoD for Computing Systems: A Categorical Approach

              steps in a design flow. In mature computer-aided design                                          where A: abstraction space, s: sub abstraction space, τ.e:
              fields, like register-transfer level integrated circuit designs,                                 developmenttimeepoch,m:meta-model,o:objectinstanceof
              automated design flows facilitate the transformation or                                          the model, c: component.
              refinement of high-level descriptions (e.g., RTL models) into                                        From a category theory perspective, we can define the
              lower-level physical formats (e.g., GDS-II). Notably, these                                      model of design as follows: Let C be a 2-category (or
              design flows invoke various software tools to shift the design                                   higher-order category) that represents the model of design.
              from initial specification to final implementation models.                                       The objects in C are categories representing different
              Typically, these flows are nonlinear, iterative, and encompass                                   components and sub-design problems, denoted as MoS and
              several intermediary phases and representations. Throughout                                      MoA, at specific abstraction spaces and development time
              these intermediary steps, specification models experience                                        epochs.
              various phases, including architectural refinement, opera-                                           These objects capture the design problem, the design
              tional scheduling, resource allocation, functional simulation,                                   specifications, and the implementation, while the arrows
              PPAevaluation, and synthesis layout.                                                             describe how this design is realised and evaluated. Specifi-
                  Another manifestation of sub-epochs is within software                                       cally, the morphisms (or functors) in C represent the design
              development methods and versioning. Agile or scaled agile                                        decisions/rules (1/3), and the 2-morphisms (or functors)
              frameworks (SAFe), for instance, are commonly employed                                           represent the evaluation models that map morphisms to
              in software development. Within agile or SAFe, temporal                                          other morphisms. This effectively transforms the design
              intervals,suchasincrements(spanningfiveiterations/sprints)                                       specifications into the implementation and evaluates whether
              or iterations (usually two-week periods), help structure the                                     this transformation has been carried out correctly.
              developmental stages of a software feature. Sub-epochs                                               Central to our discourse is how model of design (MoD)
              can be used to chronicle these increments and iterations.                                        concept encompasses perspective on system design. Rooted
              Furthermore, epochs and sub-epochs can serve to distinguish                                      in various foundational design methodologies and tax-
              between major and minor software versions, capturing the                                         onomies, the MoD concept reinterprets and extends these
              evolution through various versions.                                                              methodologies, integrating them within a single, unified
                                                                                                               framework. Figure 1 provides a visual representation of the
              6) MODELOFDESIGN                                                                                 MoD and its intricate relationship with the Gajski-Kuhn
                                                                                                               Y-chart, among other methodologies.
              Drawingupontheaforementionedcorecomponents,namely                                                    The MoD concept, depicted in the figure as triangles
              models of specification (MoS), architecture (MoA), imple-                                        of refinements embraces a hierarchical approach, capturing
              mentation (MoI), evaluation (MoE), and design deci-                                              modelsforindividualcomponentsthatcollectivelyconstitute
              sions/rules (1/3), we are now in a position to present the                                       the complete design. This is articulated within the compo-
              model of design (MoD). This model can be viewed as a                                                                                 o|m|         A.s
                                                                                                               nent, c: component in                    MoD , facilitating hierarchical
              2-category or higher-order category that captures the essence                                                                        c|           τ.e
              of the design problem.                                                                           designs across diverse abstraction spaces. Such a methodol-
                                                                                                               ogy proves invaluable in ensuring design reuse and effective
                                                                                                               encapsulation of design concerns for intricate sub-domains
                  Definition 13. Model of Design (MoD)                                                         of hardware and software components. Examples include
                  Amodelofdesign(MoD)isahigher-ordercategorythat                                               general-purpose processors, graphical processors, memory
                  formalisesthedesignproblemforpotentialdesignspec-                                            systems, I/O modules, hypervisors, and real-time operating
                  ifications belonging to a specific model of specification                                    systems. Guided by the MoD framework, distinct teams
                  (MoS) and architectures (MoA) within an arbitrary                                            can systematically develop design models for architectural,
                  abstraction space. It uses design decisions/Rules(1/3),                                      evaluative, and implementational facets of various modules
                  given models of evaluation (MoE), to generate an                                             and components, such as application processors, graph-
                  implementationunderamodelofimplementation(MoI)                                               ical processors, communication processors, and clocking
                  at a specific abstraction space.                                                             modules.
                      The MoDcanbehierarchical, encompassing various                                               It   is   essential to position the MoD concept within
                  components and sub-design problems, and can evolve
                  over time to incorporate multiple development stages.                                        the broader landscape of system design methodologies,
                  MoDcanalsobecomposedwithotherMoDs.Formally,                                                  particularly for embedded computing systems. The MoD
                  wedefine MoDas:                                                                              concept aligns with established academic system design
                             o|m|          A.s     o|m|         A.s o|m|           A.s                         methodologies, including platform-based design (PBD),
                                   MoD :⟨ MoS ,                            MoA ⟩
                                           τ.e                  τ.e                τ.e                         component-based design (CBD), and model-based design
                                   o|m|MoEA.s
                                             τ.e                                                               (MBD). In comparison to the double-roof model for hard-
                                   ←−−−−−−−           o|m|       A.s
                              −−−−−−−−−→                   MoI                                                 ware/software co-synthesis, the MoD concept introduces
                               o|m|   A.s o|m|  A.s              τ.e
                                    3 ,       1
                                      τ.e       τ.e [                                                          unique nuances. While the software/hardware implementa-
                                   o|m|    A.s           o|m|     A.s
                             s.t.       M :⟨                   M ⟩                                             tion models correspond to our model of implementation
                                           τ.e           c|       τ.e
                                                     ∀c                                                        (MoI), and top-level specifications are analogous to our
                                                                                                               model of specification (MoS), the MoD distinguishes itself

              VOLUME11,2023                                                                                                                                                                     116325
                                                      T. Mohammadat: MoD for Computing Systems: A Categorical Approach

                    FIGURE 1. A diagram illustrating MoD concept and its main constituents: model of specifications (MoS,
                    comprising model of functionality, MoF, and model of extra functionality, MoX), model of architecture
                    (MoA), model of implementation (MoI), and model of evaluation (MoE), in addition to design
                    decisions/rules across different levels of (sub) abstractions and hierarchies (see Foundational
                    Construct 2). The diagram depicts equivalence of MoF, MoA and MoI with the behavioural, structural
                    andphysical domains of the Y-chart. It also shows the analogy of the MoD with Gajski-Kuhn Y-chart
                    andhowdesigndecisions map to design automation activities.

       116326                                                                      VOLUME11,2023
         T. Mohammadat: MoD for Computing Systems: A Categorical Approach

         through its emphasis on evaluation models and development
         stages.
            Examining the MoD in relation to industrial practices,
         suchastheV-chart,revealssimilarities,especiallyconcerning
         developmental stages like architecture, design, and develop-
         ment engineering. However, the MoD again differentiates          FIGURE 2. A diagram illustrating MoD as a category of categories: model
         itself byintroducingexplicitabstractionsandevaluationmod-        of specifications (MoS, comprising model of functionality, MoF, and
         els for design components. The seminal Gajski-Kuhn Y-chart       modelofextra-functionality, MoX), model of architecture (MoA) and
         has profoundly influenced the MoD concept, sharing many          modelofimplementation (MoI). The model of evaluation (MoE)
                                                                          anddesign decisions/rules are depicted as morphisms or arrows. Note +
         of its foundational elements. Yet, the MoD enhances this         here technically denotes a categorical co-product.
         by introducing an explicit representation of extra-functional
         facets and evaluation models.
            Delving deeper into the connections with different devel-     the category graphs). In that sense, operations on MoD and
         opment frameworks, it becomes imperative to visualise the        its constituents such as unification, categorical products, and
         MoDframeworkinrelationtoestablisheddesignmethodolo-              transformations can be formally defined. An illustration of
         gies and taxonomies. This comparative analysis accentuates       the MoDasacategoryofcategories is depicted in Figure 2.
         the enhanced scope and inclusivity of MoD, particularly            Figure 3 features a graph and range of symbols, many
         highlighting how it integrates diverse methodologies into its    of which are used in category theory, to denote transfor-
         schema.                                                          mations, relations, and assumptions within and between the
         Remark 26 (On objects, models and metamodels). Models            subsystems. MoS, 1/3, MoE, MoA, and MoI represent
         can belong to different libraries of models (e.g. specification  categories in the model of design. This might stand for
         libraries, evaluation libraries, component libraries, design     different aspects of a system design, such as specification
         libraries, implementation libraries, etc.). In each of these     (MoS), evaluation frameworks (MoE), architectures (MoA),
         models, we can derive specific instances that satisfy the        implementation representation (MoI), and change operators
         modelwecallthemobjects;e.g.aSobelgraphfollowingSDF               or model transformation units (1/3). Id is a standard
         is an object or an instance while the general SDF model is a     notation in category theory for identity morphisms, i.e.,
         modelatthetransaction level. The set of all pins, ports, nets,   morphisms that leave objects unchanged when applied. The
         cells, clocks of a design can be the objects of an architecture  letters inside the arrows (e.g., T, I, R, A, G, C, E) represent
         at the RT abstraction. The models can correspondingly have       different morphisms, functors, or natural transformations
                       m       m       m       m
         meta-models( MoS, MoA, MoE, MoI)withapotential                   between categories, that represent various relational aspects
         addition of other languages that enables manipulating the        within system design. For example, T means ‘Transform’,
         model itself: its creation, management and modification.         C means ‘Characterise’, G means ‘Guarantee’, etc. The
         In various cases, meta-models can be languages to describe       symbols (|H, ⊢) near each of the nodes represent operations
         complementary (meta) data for logging design steps and           performed within each category or constraints applied to it.
         reporting intermediate/final design results, other informa-      The double-headed arrows with ‘‘in’’ label are representing
         tion such visualisation and views (e.g. graphical/symbol         inclusion functors. These would indicate that some elements
         schematic/physical view, and simulation purposes view),          or structures from one category can be seen as a part
         or other info e.g. versioning, compatibility and executability.  or structures of another. The complex paths between the
         The concepts of object, model and meta-model within the          different categories (MoS, 1/3, MoE, MoA,MoI)represent
         model of design can be analogous to that from the OMG            more complex transformations, perhaps involving multiple
         metaobjectfacility,wherebytheM0-levelmapstotheobjects            steps or the composition of multiple basic transformations.
         compliantwiththemodelsoMoD,thedomain-specificmodel                 Fromasystemsengineering perspective, this might depict
         M1-levelmapstotheMoDmodels MoD,andthemetamodel                   a model-based or category-based systems engineering pro-
         M2-level and the meta-language M3-level maps to MoD              cess. Each category could correspond to a different stage or
         metamodels, mMoD.                                                aspect of the system design process, with the transformations
         Remark 27 (MoD and MoD constituents as categories). An           representing different design or analysis tasks. The diagram
         idea behind our definitions of MoD and its constituents          might express how different models and a change/relation
         as models is to enable treating them as categories and           operator or model transformation unit relate to each other
         defining corresponding morphisms (in the sense of category       and interact throughout the design’s sphere. It also hints at
         theory). This means MoD would comprise categories of             how assumptions, restrictions, and other constraints factor
         specifications, architectures, and implementations (called       into these relations and interactions.
         categorical objects or the vertices on the category graphs).     Remark 28 (MoI circular reference in MoD). From Defini-
         Evaluationmodels,designdecisions,andruleswouldthenbe             tion 13, MoI appears both as input to MoE and as output of
         morphisms, functors and natural transformations that relate      MoD,whichmightsuggestsomesortofcirculardependence.
         the MoD categorical objects to each other (the arrows on         This is usually circumvented by provision/development of

         VOLUME11,2023                                                                                                         116327
                                                      T. Mohammadat: MoD for Computing Systems: A Categorical Approach

              FIGURE 3. MoD as a category of categories with expanded relationships. Note that the arrows depicting different kinds of
              relations between the categories of MoD, which are part of the evaluation models (MoE) and/or design decisions/rules
              categories.

       116328                                                                      VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

          the implementation model (MoI) and how it can be evaluated         (MoS) play the primary entry role to the design activity.
          (MoE) with respect to specific requirements (MoX) through          In order to make the design more inclusive to hardware,
          characterisation (see Definition 12).                              the MoX concepts had been introduced explicit to the MoS,
          Remark 29 (Real-time systems/models and MoD). Real-                whereas to be more inclusive to software, the MoB concepts
          time models such as periodic, sporadic, aperiodic models           had been introduced explicitly to the MoS. The architecture
          can be considered as union of time-related extra-functional        is viewed as a meeting-in-the-middle for both the SW/HW
          requirement (MoX) such as deadline, latency for untimed            aspects as opposed to the departure in the double roof
          modelofcomputation(MoC)suchasKPNontime-triggered                   model [31] whereby the implementation and architecture of
          processor based like architectures (MoA) with schedulers.          hardware and software are viewed separately.
          Real-time analysis such as scheduleability analysis, mapping          Several industry anecdotes have encouraged our adoption
          problemsandend-to-enddatapropagationcanbeconsidered                of hierarchical abstractions and development timelines in
          as part of evaluation models (MoE) and/or design decisions         our formalism, taking into account all facets of the model
          (1) that are used for the design problem of real-time              of design concept: specifications, architecture, evaluation,
          systems. Furthermore in a way similar to our remark on             and implementation. In the IEC 61508 standard, concerns
          MoCshierarchyinRemark7,usingtherelationshipbetween                 regarding formal approaches underline challenges like a
          real-time systems and model of design, one can capture             ‘‘Fixed level of abstraction’’ and ‘‘Limitations in capturing
          different levels of hierarchies for real-time systems as shown     all pertinent functionality at a particular stage’’, thus the
          byStigge and Yi [29].                                              emphasis on developmental axes. Consequently, the design
          Remark 30 (MoD relation to platform-based design taxon-            canbearticulatedusingMoDprinciples,describedatvarying
          omy). Platform-based design is a well-known conceptual             levels of abstraction based on the abstraction spaces inherent
          (meta-model) framework for the electronic system level             to the MoD’s components. For instance, an MoD at the
          (ESL). The MoD definition, compared to a PBD taxonomy              RT-Circuit abstraction level might have its MoC and MoF
          such as [30] differs in the sense that MoD framework               characterised as a Boolean circuit and disjunctive normal
          separates the evaluation and architectural models from the         forms; MoX detailing critical path delays and input/output
          platform, as there could be various ways to evaluate a             loads; MoI composed of standard cells detailed in LEF
          platform model and that an architecture maps to different          file formats, drawing on TSMC 2nm process design kit
          platforms thereby justifying the distinction of the notions.       technology files; and MoE using inductive, capacitive, and
          Remark 31 (MoD relation to model-based methods). The               resistive wireload alongside standard cell delay models.
          role of models within the model of design concept is                  The MoD concept, given its hierarchical nature,
          central and therefore several similarities can be established      awareness    of   abstraction  levels,  partitioning,  model-
          between model based methods such as: model driven                  centric approach, and inclusiveness of platforms, aligns
          development, model based design, model driven engineering          with   or   is  compliant   with   other   notions   such as:
          and model driven architecture (MDA). In particular regards         model-driven engineering/design (MDE/MBD) via the
          to the model-driven architecture methodology, a one-to-            specification-based framework, component-based design
          one mapping between model of specifications, model of              (CBD) through the component-based architectural frame-
          architecture and model of implementation with computation          work, and platform-based design (PBD) by presuming
          independent model, platform specific model and technology          the design process’s implementation. Furthermore, as it
          independent model is established. In addition, the role of         is feasible to have multiple MoDs in principle, it is also
          transformation in MDA can be directly related to design            possible to deliberate over various product lines at different
          decisions in MoD.                                                  development phases. As depicted in Figure, the MoD might
                                                                             feature ‘epochs’ and ‘sub-epochs’. This differentiation is
          Remark 32 (MoD relation to component-based methods).               not strictly formal but serves to capture the progressive
          The role of components within the model of design concept          design processes within various developmental stages,
          is central to the model of architecture and computation            contingent upon the industrial standards employed. For
          (when considering processes as component) at all levels            example, a firm might use engineering, product, or customer
          of abstraction. In circuit level abstraction, the role of          change orders/notices to demarcate different development
          components (or circuit elements) can be viewed to be larger        sub-epochs, while using technology readiness levels to
          and more significant since all computation and platforms           differentiate between various development epochs.
          elements are merged. The theories developed within the
          BIP framework (a component based construction) can be
          applicable to the model of architecture and the correctness         B. PROPERTIES
          of the compositionality.                                           Inthissubsection,wedelveintoacomprehensiveexploration
          Remark 33 (MoDrelation to HW/SW codesign and the dou-              of properties that follow from our model of design. These
          ble-roof model). MoD is perceived to be hardware/software          properties, integral to the core findings of our study, illumi-
          codesign from its inception, whereby specifications models         nate key notions including, but not limited to, development

          VOLUME11,2023                                                                                                              116329
                                                                             T. Mohammadat: MoD for Computing Systems: A Categorical Approach

         time, coherence, complexity, equivalence, and correctness.     indicatorofthedesign’sorthogonality,helpingtoquantifythe
         Their understanding is pivotal for a holistic grasp of the     potential for model exchange and reuse.
         broader implications and applications of our model in          Note 1. It is important to note that design methods that
         Subsection III-C. Let us proceed to dissect each of these      observe the orthogonalisation of design concerns [7] can
         properties.                                                    give rise to reusable design components that are potentially
                                                                        efficient to implement. This is because, when orthogonalising
            Property 1. Orthogonality of Design Models ()              concerns, we can avoid repetition and inconsistency between
            Orthogonalityofdesignmodelsisapropertyofamodel              the models. However, when we try to apply the orthogonal-
                            o|m|     A.s
            of design D ∈       MoD , that describes the degree         isation principle within the models themselves (intra-model
                            c|       τ.e
            of (categorical) interactions within its constituents S ∈   level), e.g. within design decisions (1)andevaluationmodels
            o|m|    A.s       o|m|     A.s        o|m|    A.s
               MoS , F ∈          MoF , A ∈          MoA , and          (MoE), it could sometimes be conceptually impossible to
            c|      τ.e       c|       τ.e        c|      τ.e
            X ∈ o|m|MoXA.s, E ∈ o|m|MoEA.s are intersecting             achieve a clean orthogonalisation within design decision
                 c|       τ.e     c|       τ.e                          problems and evaluation models as it is usually the case
                       (MoD)=\S∈ o|m|MoSA.s,                           that design decisions and evaluation overlap and give rise
                                           c|      τ.e
                                         o|m|    A.s                    to inseparable trade-offs. Furthermore, orthogonalisation of
                                    A∈       MoA ,
                                         c|      τ.e                    concernsisnotappliedtothefundamentalsyntax/alphabetof
                                 E ∈ o|m|MoEA.s                         the modelling languages, as some overlap and commonality
                                      c|       τ.e
                                                                        is in fact needed between different design components to
                                                                        achieve interoperability.
            The property , related to orthogonalisation of design
         concerns, is meant to measure the extent of which a               Property 2. Design Space (ζ)
         model entity within a specification is repeated within the        Design Space: The design space for a model of design
         architecture and the evaluation model. Since we consider                   o      A.s
                                                                           X ∈        MoD     represents the degree of freedom
         the implementation model to be the result of the design,                   c|     τ.e
                                                                           encompassing all possible permutations of computa-
         weexpectsomeentitiesfromthearchitectureorspecification            tional behaviours within the functional domain and
         to be present in the implementation. Orthogonalisation of         combinations of all potential implementation options,
         design models can help in facilitating model exchange             namely:
         and reuse within different design models. Orthogonality                              o     A.s    o      ′A.s
                                                                                     ζ(X) = | MoA |×| MoF            |
         of design models () can be derived from the provided                                c|    τ.e    c|     τ.e
         definitionofthemodelofdesign(MoD)bycloselyexamining               Thus, design space exploration (DSE) is an iterative
         the relationships and interactions between its constituent        process wherein design decisions are made to assign
         components.                                                       design variables (∈ ζ) to one or more values from their
            In the MoD, each design component has a specific role          respective value domain, after evaluation (in line with
         andpurpose: MoScapturestheproblemspecifications, MoA              MoE and 3), aiming to meet or optimise the design
         captures the architecture, and MoE captures the evaluation        specifications (∈ MoS).
         models. Together, they provide the necessary elements for
         the design. These elements are linked through morphisms           This definition is also intertwined with concepts such
         represented by design decisions/rules (1/3) that transform     as optimisation/satisfaction or the refinement space for
         these specifications into a concrete implementation.           the design problem, delineating potential pathways for
            The property of orthogonality (), from the given defi-     optimisation/satisfaction or refinement culminating in an
         nition, measures the degree of interaction (or intersection)   implementation. The definition draws upon prior concepts:
         between these elements. In highly orthogonalised design        a model of design, according to Definition 13, integrates
         models, elements are modular and have minimal over-            specification, architecture, evaluation, and implementation.
         laps, meaning they can be modified independently without       Given that extra-functional specifications and evaluation
         affecting the others. This is crucial for reusability and      models, as per Definitions 5 and III-A4, omit design
         exchangeabilityofdesignmodels,aschangesinoneareawill           elements and instead outline supplementary requirements or
         have minimal impact on others.                                 their evaluations, they are excluded from the design space.
            Tocompute(MoD),onecomputestheintersectionofall             Through this exclusion process, the residue is the translation
         elementsacrossMoS,MoA,andMoE,throughthefunctor.               of functional specifications into architectures.
         This gives a measure of how much these elements are               The notion of design space (ζ) and design space explo-
         intertwined. A larger intersection (higher  value) would      ration is rooted in the model of design (MoD), quantifying
         imply a less orthogonal (i.e., more interdependent) design,    theconceivablesolutionsthatadesignmodelmightembrace.
         while a smaller intersection (lower  value) would indicate    In line with the MoD definition, a model of design amalga-
         a more orthogonal (i.e., more modular and independent)         mates all design specifications (MoS), architectures (MoA),
         design. Therefore, in the context of MoD,  serves as an       andfunctionaldomains(MoF)pivotaltothedesigntask.This

         116330                                                                                                        VOLUME11,2023
             T. Mohammadat: MoD for Computing Systems: A Categorical Approach

             multidimensionalexpanseofviablecombinationsconstitutes                                      different paths through a series of morphisms (in this case,
                                                                                 o        A.s
             the ‘design space’. Therefore, when ζ(X) = | MoA                                | ×         mappings or transformations from one model to another)
                                                                                 c|       τ.e
              o         ′A.s                                                                             yield the same result, essentially maintaining the consistency
             |  MoF τ.e|,it fundamentallymeasurestheaggregatenumber
              c|                                                                                         of the overall system.
             of combinations of architectures and functional domains for
                                                                                     o        A.s
             a specific model of design X. In this equation, | MoA                               |
                                                                                     c|       τ.e            Property 3. Coherence (β)
             represents potential implementations (architectures), while                                                                                                  o|m|
              o         ′A.s                                                                                                                                                          A.s
             |  MoF         |  denotes functional prospects. Design space                                    Coherence: A model of design D ∈                                  MoD ,
              c|        τ.e                                                                                                                                               c|          τ.e
             exploration thus becomes the traverse through this expanse                                      is said to be coherent with respect to its constituents
                                                                                                                     o|m|        A.s            o|m|        A.s           o|m|        A.s
             to pinpoint the optimal solution. Here, ‘optimal’ hinges on                                     S ∈          MoSτ.e, F ∈                MoFτ.e, A ∈               MoA ,
                                                                                                                     c|                         c|                        c|          τ.e
             the design transformation process (1/3) and the evaluation                                      X ∈ o|m|MoXA.s, E ∈ o|m|MoEA.s and I ∈ o|m|MoIA.s
             model(MoE)thatassessthesuitabilityofaparticularcombi-                                                   c|          τ.e          c|          τ.e               c|         τ.e
                                                                                                             iff there exists assume-guarantee relationship between
             nation vis-Ã -vis the specifications (MoS). In this paradigm,                                   specification, architecture, evaluation and implementa-
             extra-functional specifications (MoX) and evaluation models                                     tion that are achieved by applying the design decision
             (MoE) do not feed directly into the design space as they do                                     and rules (1,3). Or in other words:
             not usher in new configurations. Consequently, the concepts                                                                          1
             of design space and design space exploration as defined                                                       D|H⟨S,E,A⟩−→I ,∀S,E,A,I
             herewith follow from the model of design’s definition.                                                                               3
                                                                                                                                       ′       ′
             Note 2 (Various Kinds of Spaces). While the design space                                                       I |H ⟨F ×A⟩,I ⊢3,∀I,A,F
             is primarily perceived as an interaction of functional and
             architectural space, there exist alternative interpretations of
             design spaces:                                                                                  The definition of coherence within a model of design
                1) DesignspaceasMoSxMoI(application-specificsystem                                       expressesthisprinciple:anMoDissaidtobecoherentifthere
                    design space, as in ASIC)                                                            is an assume-guarantee relationship between its constituents,
                2) Design space as MoS x MoA (application-specific                                       thatis,themappingsandtransformationsapplied(throughthe
                    system architecture design space, as in FPGA)                                        design decisions 1 and rules 3) produce consistent results,
                3) Design space as MoX x MoA (functionally agnostic                                      maintaining the integrity of the overall design.
                    design-for-X or component-based design, e.g., RT for                                     Given the definition of an MoD, let us examine if the
                    time, low-power design of components such as RTOS,                                   coherence property follows:
                    NoCs, memories, processors, etc.)                                                       1) First,acoherentMoDmustsatisfytheassume-guarantee
                4) Design space as MoF x MoA (architectural functional                                          relationship between the specifications, evaluation, and
                    design, as in Kienhuis’ Y-Chat)                                                             architecturethatleadstotheimplementation,formalised
                5) DesignspaceasMoFxMoI(functional-platformdesign                                                                                 1
                                                                                                                as D |H ⟨S,E,A⟩ −→ I. This captures the idea
                    space, as in PBD)                                                                                                             3
                                                                                                                that for any valid set of specifications, evaluation,
             Other associated notions describing possibilities within the                                       and architecture, applying the design decisions and
             models of design encompass: specification space, functional                                        rules will lead to a valid implementation, essentially
             space, extra-functional space, behavioural space, archi-                                           saying that the process of going from specifications to
             tectural space, platform/implementation space, evaluation                                          implementation is coherent.
             space, and design decision space.                                                                                                                            ′      ′
                                                                                                            2) Thesecondpartofthedefinition,I |H ⟨F ×A ⟩,asserts
                 The magnitude of the implementation space can swiftly                                          that the implementation must satisfy the mapping from
             surge to an exponential scale when contemplating every                                             the functional domain to the architecture domain. This
             potential permutation in the design space. This burgeoning                                         maintainstheconsistency(orcoherence)ofthemapping
             complexityholdstrueevenwhenemployingaplatform-based                                                across these domains. The clause I ⊢ 3 indicates that
             design approach, where nuances exceeding the circuit and                                           theimplementationshouldsatisfythedesignrules,again
             logic spheres are abstracted by the platform selection.                                            asserting the consistency of the design process.
             For instance, when targeting computing systems via a                                            Proving coherence in this context would involve demon-
             platform-based design approach, there exist over 14,427                                     strating that the design process consistently yields valid
             embedded computing platforms from suppliers such as                                         implementations that satisfy the defined rules for any
             mouser.com and farnell.com (excluding original equip-                                       given set of valid specifications, evaluation models, and
             ment/design manufacturers and OS providers). Yet, in prac-                                  architecture. This is generally a design-specific endeavor and
             tical scenarios, this design space can be pruned due to                                     woulddependonthespecifics of the design problem and the
             symmetries and limitations emerging from compliance with                                    associated specifications, evaluation models, architecture,
             particular design rules and MoX.                                                            and design rules.
                 Next, we explore the Coherence property. Coherence, in a                                    The use of the term ‘coherence’ here is more akin to
             category-theoretical context, often refers to the idea that                                 its usage in software engineering or systems design, where

             VOLUME11,2023                                                                                                                                                            116331
                                                                             T. Mohammadat: MoD for Computing Systems: A Categorical Approach

         it refers to consistency or logical integration of various          and their corresponding evaluation models and design
         components, rather than its specific meaning in category            decisions.
         theory.                                                           Giventhese,theconceptofcomplexitycanbemappedonto
            Notably, this notion of coherence is compatible with that   the MoDasfollows:
         of Sifakus’ [26] in relation to correctness-by-construction,      The complexity of the MoD, O(MoD), is a function of
         in the sense that our criteria on coherence is subsuming       the complexity of the evaluation model (MoE) and the
         Sifakis’ use of transition systems, model interactions and     complexity of the design decisions (1), that is, O(MoD) :
         priorities to reason about components’ composability and       (MoE ∪1)7→S,T,n ,n ,k ,k .
         compositionality. Additionally, one can note that this notion                        s   t  t  s
         of coherence relates to the assume-guarantee relations in         ToshowthatthisdefinitionfollowsfromtheMoD,wecan
         contract-based design concepts shown in [9] and [32].          say that for any MoD X, the set of all possible design
                                                                        decisions, 1, and all possible evaluation models, MoE, have
            Property 4. Complexity (O)                                  some inherent complexity. This complexity is characterised
            Complexity:Thecomplexityofdesignisthecomplexity             byatimecomplexityclassT andaspacecomplexityclassS,
                                              S                         with n ,n ,k ,k being the variables that describe the degree
            class that indicates the space (S ∈         DSPACE                s  t   t  s
                                                ∀n ,k ∈N
               k    S              k    S         s s n k               of complexity within these classes.
            ((n s))    NSPACE((n s))       NSPACE((2 s s))) and
               s        S         s               S                        In other words, the complexity of evaluating a design
            time (T  ∈            DTIME((n kt))          NTIME
                           ∀n ,k ∈N          t      ∀k∈N
               k   S        t  t n k                                    (MoE)ormakingadesigndecision (1) in the context of the
            ((n t))   NTIME ((2 t t))) complexity in BigO nota-
               t                                                        MoD falls within some space and time complexity classes
            tion, O(n) for the model of evaluation and design           S and T respectively, thereby justifying the concept of
            decisions. i.e.                                             complexity O(MoD).
                                                                           Given a MoD X, let 1         and MoE     be the set of
                 O(MoD):(MoE ∪1)7→S,T,n ,n ,k ,k                                                    X            X
                                                  s  t  t  s            all possible design decisions and evaluation models for
                                                                        X respectively. By definition of time and space com-
                                                                        plexity, there exists some n ,k ,n ,k     such that 1 ,
            Whereby, S,T are the space and time complexity classes                                     s  s  t  t          k    X
                                                                                             kt            kt             n t
         respectively, while n ,n ,k ,k are the variables describing    MoE ∈ DTIME(n )∪ NTIME(n )∪ NTIME(2 t ) and
                             s   t  t  s                                     X               t             t           k
                                                                                      k               k                 s
         the degree of complexity within the complexity classes.                       s               s              ns
                                                                        ∈ DSPACE(n )∪ NSPACE(n )∪ NSPACE(2 ). Hence,
                                                                                      s               s
         DTIME(f(n)) and NTIME(f(n)) refers to classes of problems      O(MoD)iswell-defined.
         that can be solved in a certain of degree described by            Therefore,wecanconcludethatthecomplexityofadesign
         f(n) in deterministic or non-deterministic time respectively.  is inherent to the MoD and is determined by the complexity
         Conversely, DSPACE(f(n)) and NSPACE(f(n)) are space            of the evaluation models and design decisions.
         complexity classes containing problems that are computable
         by deterministic and non-deterministic Turing machines.
         The terms SPACE(f) and TIME(f) are used as functions              Property 5. Solvability (ν)
         that determine the space and time complexity classes of a         Solvability: the solvability of a model of design object
         function, f, respectively.                                               o      A.s
                                                                           X ∈      MoD     is a function that describes the time
            The complexity of a design, as defined herewith, is about             c|     τ.e
                                                                           and space (t,s) at which the design can be solved
         how difficult it is to evaluate a design or make design           on a given (Turing-complete) computing machine (m)
         decisions, and it is measured in terms of time and space          with finite space and time budgets (B ,B ) for finding
                                                                                                                t  s
         complexity. Given the definition of the model of design,          approximate (numerical) or symbolic (exact) solution
         wecansaythatcomplexityinherentlyarisesfromthevarious              for a specific input of specifications, architecture, and
         interactions and mappings that exist within the MoD.              implementation models. When denoting a computing
            In the context of the MoD, the time and space complexity       machine (m) of a time and space budget (B ,B )
                                                                                   N                                       t  s
                                                                                     B
         can be understood as follows:                                           m    s
                                                                           with (    B ), we can express the solvability ν of an
                                                                                      t
            • Time complexity (T ): Time complexity is a measure of        evaluation or design decision problem as the function
                                                                           that returns the time and space resources (t ,s )
              the computational resources, specifically time, that an                                                      r  r
              algorithm or process consumes as a function of the size      connected with that problem i.e.
              of the input. In the context of the MoD, time complexity          B                NB
                                                                                 s              m   s
                                                                               O                   B
              is a measure of the computational effort required to           m                      t
                                                                        ν(X,       ) : Solve(X) −−−→ s ,t |s ,t ∈ R
              evaluate a design or make design decisions.                                              r  r  r  r    ≥0
                                                                                B
            • Space complexity (S): Space complexity is a measure                t
                                                                        s.t. Solve(X) : f (X ,X ,X ,...,X ) = C 7→ f−1(C)
              of the amount of memory an algorithm or process uses                        0   1   2        i
                                                                         ={A ,A ,A ,...,A)∈D|f(A ,A ,A ,...,A)=C
              as a function of the size of the input. In the context of       0   1    2       i          0   1   2        i
              the MoD,spacecomplexityisameasureofthememory              A:assigned values and D: Domain of values
              resources required to store the information about the
              designspecifications,architectures,functionaldomains,

         116332                                                                                                        VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

          R isthesetofnon-negativerealnumbers. Amodelisthen                       The solvability can lead to another property, development
            ≥0
          solvable if it can be solved using time and space resources          time, as they are both related in terms of the time needed
          that are bounded (less than infinity) within the resources of        for the computation in the design process. The solvability
          the computing machine, i.e. s ≤ B ,t ≤ B .                           property indicates the time and space resources necessary to
                                         r     s  r      t
             As most of the design decisions are in general NP-hard,           findasolutionforthedesignproblem.Thiscomputationtime
          since most of specific design problems are bounded, they             is directly related to the development time, which quantifies
          can still be feasibly solvable in bounded time and space             thetotaltimerequiredforthedesignandevaluationprocesses
          budget (especially on a high-performance massively-parallel          within the model of design. Hence, the solvability property
          computing machine). As such solvability and complexity are           can be considered as one of the contributing factors to the
          different, but related.                                              development time.
             The concept of solvability is fundamentally linked to the            Wecanincorporate this into the definition of the develop-
          computability and complexity theory in computer science.             ment time as a property of the model of design as follows:
          The ability to solve a problem is indeed a function of the
          resources (time and space) available and the complexity of              Property 6. Development Time (ι)
          the problem itself.                                                     The development time of a model of design object
             In this specific case, the solvability of a model of design is       Y ∈;o|m|MoDτ.eA.s is a function that quantifies the
          defined as a function that, given a model and a machine with            total time required for the design and evaluation
          certain time and space budgets, produces the time and space             processes within the MoD. It includes the time needed
          resources necessary to solve the design. This is a plausible            to make each design decision and the time taken
          definition, grounded in the understanding of computational              for the evaluation of the design decision against the
          problems.                                                               specifications,followingthedesignrules(3),toconvert
             Toshowthatthis property follows from the definition of a             thedesignspecifications(MoS)intotheimplementation
          modelofdesign,wemustshowthatthedesignproblemposed                       (MoI). Development Time, ι, is expressed as an integral
          by an MoD can be mapped onto a computational problem,                   function of all design decisions and evaluations over
          and that the resources required to solve this computational             time, and it varies with the speed (v) and number (n)
          problem are bounded.                                                    of available computational resources:
            1) Mapping the design problem onto a computational                              ι(Y,v,n) :    1 Z (1A.s +EA.s)dτ.e
               problem: The definition of an MoD describes a process                                    n·v        τ.e    τ.e
               of turning a set of specifications, an architecture, and an
               evaluation model into an implementation using a set of
               designdecisions.Thisprocesscanbeseenasafunction:
               given a set of inputs (the specifications, architecture,        1A.s representsthetimeconsumedbyeachdesigndecisionat
               etc.), it produces an output (the implementation). This            τ.e
               functionispreciselythekindofmappingweneedtoturn                 development time epoch (τ.e) and sub abstraction space A.s.
               the design problem into a computational problem.                n: the number of computational resources, and v is the speed
                                                                               of the computational resources.
            2) Bounding the resources required to solve the problem:                                        A.s
                                                                                  The design decisions 1        include the computation time
               The solvability function we have defined takes into                                          τ.e
               account the resources of the computing machine, and             required to solve the design problem, as defined by the
               it gives the time and space resources needed to solve           solvability property ν.
                                                                                                       B
                                                                                                         s
               the problem. If the problem is indeed solvable, these                     A.s     A.s m O
                                                                                    ν(1     +E ,          ) :
               resources must be less than or equal to the machine’s                     τ.e    τ.e
                                                                                                       B
               time and space budgets, i.e., s ≤ B and t ≤ B . If the                                    t
                                               r     s      r     t                                            N
                                                                                                                 B
               problemcanbesolvedwithintheseresourceconstraints,                                             m    s
                                                                                                                 B
                                                                                                 A.s    A.s       t
                                                                                        Solve(1     +E )−−−→s ,t =ι(Y,v,n)
               then it is considered solvable.                                                   τ.e    τ.e           r  r
                                                                                        |s ,t ∈ R
             Given these arguments, the concept of solvability is                        r   r  N≥0
                                                                                                   B
          consistentwiththedefinitionofaMoDandcanbeconsidered                     Here, ν(Y,m       s) is the solvability of the design object Y
                                                                                                   B
                                                                                                    t
          a property that naturally follows from that definition.              on a given (Turing-complete) computing machine (m) with
             As pointed out, while solvability and complexity are              finite space and time budgets (B ,B ). This property holds
                                                                                                                   t   s
          related, they are distinct concepts: complexity refers to the        provided the design decisions and evaluation processes are
          inherent difficulty of a problem (often in terms of worst-case       computationally feasible within a given time constraint.
          or average-case scenarios), while solvability refers to the             In this property, Y is the object instance in the model
          practical ability to find a solution given particular resources.     of design, 1A.s is the design decision at development time
                                                                                             τ.e
          It is important to note that even if a problem is solvable (in the   epoch τ.e and sub abstraction space A.s, and ι(Y,v,n) is the
          sense that a solution exists), it may not be feasibly solvable if    Development time of the MoD object Y, given a speed v and
          the complexity is too high relative to the available resources.      numbernofcomputationalresources.Thedevelopmenttime

          VOLUME11,2023                                                                                                                  116333
                                                                                  T. Mohammadat: MoD for Computing Systems: A Categorical Approach

                                                     A.s
          is the integral over the design decisions 1   with respect to     determinismapplicabletomodelsofcomputationasfollows:
                                                     τ.e
          the development time τ.e, scaled by the speed and number of       ‘‘A physical system behaves deterministically if, given an
          computational resources. It gives a measure of the total time     initial state at instant t and a set of future timed inputs, then
          required to conduct and evaluate the design within a given        thefuturestatesandthevaluesandtimesoffutureoutputsare
          MoD, considering the computational resources’ speed and           entailed’’ [33]. ‘‘Let M = (S,I,O,C,E,B,p) be a model
          quantity. This property is conditioned on the computational       of computation (MoC) where S is the set of all legal system
          feasibility of the design decisions and evaluations within the    specifications (i.e., supplied by a designer), C be the set of all
          given time constraint.                                            legal choices that can be made in implementing any system,
                                                                            I and O be the sets of inputs and outputs accounted for by the
            Property 7. Predictability (ρ)                                  model of computation, E and B be the sets of environmental
            Predictability: For a model of functionality or imple-          inputs and behaviours not accounted for by the model of
            mentation X     ∈     o MoFA.s ∪      o MoIA.s, given a         computation,andp : S×C → (I×E ∈ O×B)bethesystem
                                  c|     τ.e      c|    τ.e
            specific set of variable assignments V, X is said to be         implementationfunctionforthemodelofcomputation,which
            predictable iff E(X,V) is a singleton with a finite value,      takes a system specification and implementation choices and
            i.e. |E(X,V)| = 1. A related concept, analysability (µ),        returns a system that transforms known and unaccounted-for
            is similar to predictability, except it applies to functional   inputs into known and unaccounted-for outputs. A model of
            models.                                                         computation M is deterministic if for all s ∈ S, c ∈ C,i ∈ I,
            To show that predictability follows from the model of           and e ∈ E, there is some function d : S × I → O
          design (MoD) as defined earlier, we need to rely on the           such that p(s,c)(i,e) = d(s,i),b’’ [34], [35]. Predictability
          definitions provided for the constituent models, and their        and solvability concepts can help with choosing efficient
          relationship with the evaluation function E as follows:           ways of solving design problems or ruling out theoretically
                                                                            known computations from being considered as infeasible
             • The definition of predictability is compatible with the      such as Ackermann functions and haulting problems. The
               definitions provided in the MoD, as it operates on X,        definition may be extended to cover stochastic processes
               amodeloffunctionalityorimplementationthatispartof            and probabilistic distribution of values and as such allow
               the larger model of design. This fits within the structure   capturing fundamentally uncertain phenomenon through the
               oftheMoD,wherevarioussub-modelscombinetoform                 probability function P, e.g. 0 < |P(E(X) ∈ D)| ≤ 1
               the overall design model.
             • Predictability Condition: The predictability condition          Property 8. Synthesisability (θ)
               states that E(X,V) must be a singleton with a finite            Synthesisability:foraspecificationmodelataparticular
               value, given a set of variable assignments V. In the            (sub) abstraction space to be synthesisable, there should
               MoD, the evaluation function E is used to assess                exist at least a corresponding implementation model at
               design decisions. If, given the particular assignments of       that (sub) space or subsequent (sub) levels.
               variables, E applied to X results in a unique and finite     To show that the concept of Synthesisability (θ) follows
               output, then the model is predictable.
             • Analysability: The concept of analysability extends          from the model of design (MoD) as defined earlier, we can
               predictability to functional models, fitting into the        establish its validity by analyzing the definitions provided for
               definitions provided within the MoD, as functionality is     the constituent models and the structure of the MoD.
               a core aspect of the design model.                              • Definition Compatibility: Synthesisability is defined
            As such, predictability provides a criterion that can be             here in terms of the existence of a corresponding
          used to assess the quality of design in terms of the clarity           implementation model for a given specification model
          and determinacy of its outcomes given specific variable                at a particular abstraction level or at subsequent levels.
          assignments. Calculating this property in a particular design          This is in line with the structure of the MoD, which
          problem heavily depends on the definitions and characteris-            considers these different abstraction levels and includes
          tics of E(X,V) and certainly that of the design specifications         both specification models (S) and implementation
          and its transformation via design decisions. If E(X,V) can             models (I) as constituents.
          be guaranteed to always produce a single, finite value given         • Synthesisability Condition: The condition for a spec-
          a set of variable assignments, then predictability follows             ification model to be synthesisable is the existence
          naturally. However, if E(X,V) can produce multiple values              of at least one corresponding implementation model.
          or is undefined for certain inputs, the predictability of X may        This is consistent with the principles of the MoD,
          not be guaranteed.                                                     which stipulates the transformability of specifications
            Analysability of functional models allows their unambigu-            into implementations through design decisions (1) and
          ouscompilationandtransformationtoimplementablemodels                   rules (3). It also aligns with the assumptions that the
          as shown in [4]. The notion of predictability is related to            design decisions and rules are consistent, and they
          Kopetz’ determinism in the context of distributed computing            lead to at least one feasible implementation for each
          systems, and Stephan Edwards and Edward Lee definition of              specification.

          116334                                                                                                             VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

            Therefore, synthesisability as a property does follow from     let us assume that it contains solvable design decisions and
          the model of design. Here is a sketch of the proof: Given a      evaluation models. If this model is synthesisable, then it
          specification model S, the existence of an implementation        means for every specification and architectural model, there
          modelI isguaranteedbythedefineddesigndecisions1and               exists a corresponding implementation model. Using the
          rules 3. If we assume that 1 and 3 are complete (they cover      evaluation models, the implementation model can be derived
          all possible design decisions and rules needed to transform      correctly from the specification and architectural models.
          specifications into implementations) and consistent (they do     Thus, the model is decidable. This argument assumes that
          not contradict each other), then for every specification model   the design decisions are solvable and the evaluation models
          Stheremustexistatleastonecorrespondingimplementation             can correctly derive the implementation models. If these
          model I. Therefore, S is synthesisable. This proof relies on     conditions are not met, then the model may not be decidable.
          the assumption that 1 and 3 are complete and consistent.         Note 3. Decidability encompasses the synthesisability of
          If they are not, then the synthesisability of S might not be     the implementation and the solvability of the design model.
          guaranteed.                                                      A decision problem, characterised by a true/false outcome,
            Asopposedtomodel-baseddesign,platform based design             is deemed decidable if a reliable method exists to ascertain
          (PBD) aided by contract theory can simplify the question         the correct answer. For intricate evaluation models, particu-
          of synthesisability substantially due to the fact that PBD       larly dealing with physical processes, decidability might be
          methodology starts by the assumption that there are existing     fundamentally constrained due to factors such as: unclear
          models that can be used for the implementations (platforms)      initial conditions and states for memory and time-invariant
          provided that there exists a mapping that satisfies the          systems, especially those perceived as chaotic in nature;
          contractual conditions (and the specifications).                 unpredictable inputs for systems of equations with feedback
            Property 9. Decidability (η)                                   loops; and models that are either non-solvable or whose
            Decidability:amodelofdesignissaidtobedecidableiff              analysisyieldsambiguousresultsasshownbyEdwardA.Lee
            it contains solvable design decisions (1) and evaluation       in his works with ‘‘Determinism’’ [35].
            models (MoE) for correctly deriving implementation,
            if it is synthesisiable, from specification and architec-         Property 10. Validity (φ)
            tural models.                                                     Validity: for a specification S to be valid with respect to
                                                                              a model of design D ∈ o|m|MoDA.s, it should match its
            Decidability in the context of a model of design (MoD)                                    c|       τ.e
          is defined as the capacity to make solvable design decisions        correspondingrequirementsR.Thematchingisdefined
          (1) and to correctly derive implementation models from              by a function or relation M : S × R → {true,false},
          specification and architectural models via evaluation models        where M(S,R) = true iff S satisfies all conditions
          (MoE), provided that it is synthesisable.                           imposed by R.
            ToshowthatthisconceptfollowsfromtheMoDasdefined,                  To demonstrate that the validity property is upheld
          wecanconsider the following:                                     according to the MoD definition, we must consider the
            • Solvability:ThispropertyisaprerequisiteforDecidabil-         relationship between a specification and its requirements.
               ity. The solvability of a model of design is defined as     Given the expansive definition of a model of design
               the possibility to solve the design within a certain time   (MoD) as a mathematical structure encapsulating various
               and space budget on a Turing-complete machine. This         facets of design, the connection between requirements and
               is a central aspect of the MoD definition, where time       specifications in this scenario is not immediately clear.
               and space complexity are accounted for in the concept       Nevertheless, the property definition implicitly suggests that
               of Complexity.                                              both specifications and requirements are integral to the
            • Synthesisability: As previously established, Synthesis-      model. They are constituents of the MoD, perhaps portrayed
               ability is a concept that follows from the MoD. It states   as entities within its category.
               that for a specification model to be synthesisable, there      LetusdenotethesetofallspecificationsasS andthesetof
               should exist a corresponding implementation model.          all requirements as R. We might envisage the function M as
               ThisconceptisessentialfortheconceptofDecidability,          a morphismorfunctorinthecategoryrepresentingtheMoD.
               since a model can only be decided if it can be              This function, or relationship, maps pairs of specifications
               synthesised.                                                and requirements to a binary truth value.
            • Evaluation models (MoE): The existence and func-                With these assumptions, the validity property can be
               tionality of evaluation models (MoE) is a part of the       perceived as asserting that for each specification S ∈ S,
               MoD structure. The role of these models in deriving         a corresponding requirement R        ∈ R exists such that
               implementations from specifications and architectural       the morphism M(S,R) returns true. Formally, given a
               models is inherent to the MoD.                              specification S ∈ S and an associated requirement R ∈
            Considering these, we can claim that the property of           R for which M(S,R) returns true, S is, by definition of
          decidability follows from the MoD. Given a model of design,      validity, valid in relation to R. Therefore, if a valid pairing of

          VOLUME11,2023                                                                                                           116335
                                                                              T. Mohammadat: MoD for Computing Systems: A Categorical Approach

         specification and requirement (S,R) exists for every S ∈ S,          beachievedbynormalisingtheresultsoftheverification
         then the validity property applies to the full design model.         process, or defining the verification function in a way
         This deduction relies on the presence of the morphism M              that it always returns a value in this range.
         and the manner in which requirements and specifications are       4) The design is considered verifiable if 0 ≤ VC(D) ≤ 1.
         organisedandinterrelatedwithintheMoD.IftheactualMoD                  This is a straightforward consequence of the previous
         fulfils these conditions, then the validity property naturally       steps, assuming V is well-defined and always returns a
         emerges from the MoD’s definition. Otherwise, the MoD                value between 0 and 1.
         might require adjustments to cater for these elements.             Verifiability relates to the correctness of design as a result
            Validity pertains to the correctness of the specifications   ofdesigndecisionsorevaluation.Verifiabilityofadesigncan
         model in terms of its association with the outcomes of          be demonstrated through assertions, proofs based on formal
         earlier stages: be it another design output (in the context     methods, emulation, simulation, and virtual and physical
         of hierarchical design), phases during design maturation,       prototypes.Inregister-transferleveldesign,logicequivalence
         subsequent engineering change orders, or in alignment with      checking (LEC), layout versus schematic (LVS) and design
         requirement intentions (often articulated in natural language   rule check (DRC) can be considered a typical example to
         documents). The last is challenging to evaluate, but the        contribute to the verifiability of design. Verification coverage
         other elements can be verified, for instance, through formal    refers to the degree to which a verification exercise or set
         methods.                                                        of verification exercises addresses all specified functional
            Property 11. Verifiability (υ)                               requirements for a given system or component.
                                                o|m|     A.s
            Verifiability: For a design D ∈         MoD      to be
                                                c|       τ.e                Property 12. Testability (ψ)
            verifiable, there should exist a verification function V :      Testability: for an implementation to be testable to a
            D×3×G→R,where3isthesetofdesignrules,and
            G:SGrepresentsthesetofallrulesofcompositions.                   degree called test coverage (TC), it must be observable
              Theverification function should satisfy the following         and controllable to that degree with respect to testing
            conditions:                                                     implementation errors affecting design variables and
                                                                            domains.
               • For any design D and any sets of rules 3 and G,              Observability (ϖ) for a model, comprising of
                 V(D,3,G)should be a real number representing               internalvariableswithvaluedomains(V ∈ D),indicates
                 the degree of verification coverage, VC, of the            the degree to which all these variables are measurable.
                 design with respect to the given rules.                      Controllability (κ) describes the degree to which the
               • V should be designed such that it quantifies the           model variables can be changeable within its possible
                 degree to which the design adheres to the func-            domainofvalues.
                 tional and extra-functional properties as outlined
                 bythe rules 3 and G.                                       Here, the notions of observability and controllability are
              Theverification coverage VC of a design can then be        introduced, which are standard concepts in systems theory
            defined as follows:                                          and engineering. Testability is then defined in terms of these
                                                                         concepts, along with the introduction of a degree of test
                            VC(D)=V(D,3,G)                               coverage, which is a common measure in electronic testing
              Adesignisconsidered verifiable if 0 ≤ VC(D) ≤ 1.           and software testing. To compute the testability within a
                                                                         specific model of design, the following can be examined:
            To show the verification function is well-defined for a        1) Define observability: The concept of observability in
         specific design problem, meaning it returns a unique value           this context is introduced as a measure of how well the
         of VC for each set of inputs, we can examine the following:          internal variables of a model canbemeasured.Formally,
           1) Definetheverification function within the MoD: As per           for a model M with internal variables V ∈ D, where
              the given property, we assume there exists a verification       Dis the domain of possible values for these variables,
              function V : D × 3 ×G → R.                                      observability ϖ can be a function ϖ : M → [0,1],
           2) ShowthatV iswell-defined:Todothis,weneedtoshow                  such that ϖ(M) measures the degree to which all
              that for every design D and every set of rules 3 and            variables in V are measurable. This can be formalised
              G, there is a unique VC ∈ R such that V(D,3,G) =                further depending on the specifics of how measurability
              VC. This will require having a method to compare the            is defined in this context.
              functional and extra-functional properties of a design       2) Define controllability: Controllability in this context is
              with the rules 3 and G, which might be dependent on             a measure of how well the internal variables of a model
              the specifics of the rules and designs at hand.                 can be changed within their domains. Formally, for a
           3) Show that V returns a value between 0 and 1: The                modelMwithinternalvariables V ∈ D, controllability
              range of the function V is the set of real numbers, but         κ can be a function κ : M → [0,1], such that
              the value returned should be a degree of verification           κ(M) measures the degree to which all variables in V
              coverage,whichisboundedbetween0and1.Thismight                   can be changed within their domains. This can also be

         116336                                                                                                         VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

               formalised further depending on the specifics of how        implementationorfunctionality)shouldbewithinaspecified
               changeability is defined in this context.                   accuracylevelofthetruevalue.Thiscanbeseenasameasure
           3) Define testability: Testability in this context can then     of how well the model of evaluation is able to accurately
               be defined in terms of observability and controllability.   represent the true functional specification or implementation
               Formally,foranimplementationI,thetestcoverageTC             figures for any given model.
               could be a function TC : I → [0,1], where TC(I) =              The notion of accuracy can be useful to reason about
               ψ(ϖ(I),κ(I)), and ψ is a function that combines the         quality of results and performance numbers reported during
               measures of observability and controllability in some       the various stages of developments. In practice, models used
               waytoquantify testability.                                  at early stage tends to be less accurate compared to those
            Note that a complete proof would require more specific         used in last stage of design or ‘sign-off’. The accuracy of
          details about the model, the variables and their domains, and    models can also relate to the errors made due to numerical
          how observability and controllability are defined. Further-      approximation methods used to solve or optimise during
          more, the way in which observability and controllability are     decision making and evaluation methods.
          combined to quantify testability can also influence whether         Ontopoftheaforementionedconsiderations,theaccuracy
          this property holds.                                             can also be affected by 1) transformational approximation
            Testing and testability in this context concerns the model     such as the reduction of real numbers in the specification
          of the implementation and possible defects/faults that could     space versus the standard IEEE floating formats, or 2)
          occur in it as an unintentional result of the construction (for  architectural choices such as approximate computing archi-
          hardware) or development (for software and soft hardware).       tectures; or 3) data compression/conversion related data
          Test coverage is thus affected by the assumption on the          losses such as those in audiovisual processing or noise-
          fault models, the design or unit or system under test, and       induced analogue-to-digital quantisation.
          the observability and controllability of the system’s internal   Note4. Valid models of specifications imply valid specifica-
          components.Testcoveragereferstothedegreetowhichatest             tions which imply that they comply with the intended design
          or set of tests addresses all faults presumably present in the   requirement.
          implementable system.
                                                                           Note 5. Testable model of implementation imply the ability
            Property 13. Accuracy (α)                                      to apply tests on the implementation to confirm that it is free
            Accuracy: for a model of evaluation E ∈ o MoEA.s that          from implementation errors, faults or failures to a certain
                                                      c|     τ.e           test/diagnostic coverage as a result of innate imperfection
            modelsthetruefunctional specification or implementa-
            tion figures E   , is said to be accurate within accuracy      within the manufacturing process.
                          true
            percentage ϵA.s% iff
                         |                |
                          E(X)−E (X)                                          Property 14. Equivalence (≃)
                                   true        ≤ϵA.s,∀X
                           |     |  |        |                                Equivalence between different parts of a model-of-
                      max( E(X) , E      (X) )
                                      true                                    design can be established, as far as certain essential
            where X ∈ oMoIA.s ∪o MoFA.s.
                         c|    τ.e  c|     τ.e                                property (or properties) is (are) concerned, if there is
            Theproperty of accuracy can be broken down as follows:            an isomorphism (a bijective morphism with an inverse)
                               |            |                                 between the constituting models that preserves the
           1) The quantity      E(X)−Etrue(X)   represents the relative
                                 |   | |      |
                             max( E(X) , Etrue(X) )                           structure. This means, for each element of a model,
               difference between the estimated value produced by             there exists a corresponding element in the other model,
               the model of evaluation E and the true value Etrue.            such that they produce the same output(s) for the same
               The denominator ensures that the difference is scaled          input(s), as far as specific concerns are in view.
               appropriately and avoids issues with division by zero.           Furthermore, an equivalence between models (inter-
                                   |            |
                                    E(X)−E   (X)         A.s
           2) The requirement              true      ≤ ϵ    states that
                                     |   | |      |
                                 max( E(X) , E (X) )
                                            true                              preted as categories) can be defined by establishing
               this relative difference must be less than or equal to         functors in each direction between the models and
               a specified accuracy level ϵA.s. This implies that the
               evaluation provided by E should be within the ϵA.s             demonstrating natural isomorphisms between these
               threshold of the true value for all models X, where            functors and the identity functors on each model. These
               X is either a model of implementation or a model of            functors must preserve the structure in terms of the
               functionality.                                                 essential properties in concern.
           3) The condition ∀X indicates that the requirement holds           Toinvestigatethedefinitionofequivalencewithinthecon-
               for all models of implementation or functionality in the
               MoD.                                                        text of a model-of-design framework,especiallyinrelationto
            Given these elements, we can see that the accuracy             isomorphism and category equivalences in category theory,
          property aligns with the provided MoD framework.                 weconsider the following:
            It states that for a model of evaluation to be considered         Firstly, we explore the notion of isomorphisms. Isomor-
          accurate, its evaluation of any model (whether it is a model of  phism between constituent models in MoD: For a pair of

          VOLUME11,2023                                                                                                           116337
                                                                                       T. Mohammadat: MoD for Computing Systems: A Categorical Approach

          models within MoD (let us take A and B as examples),                         guarantees that the models can be melded without
          an isomorphism between them can be defined as a pair of                      friction.
          morphismsf : A → B andg : B → Asuchthatf ◦g = id
                                                                          B      Note6. Theequivalencepropertywithinthemodel-of-design
          and g ◦ f = idA. Here, ‘◦’ represents the composition of               framework is not only about structural congruence but also
          morphisms, and id is the identity morphism of a model. This            about ensuring an approximate or exact correspondence in
          definition ensures that for each element in one model, there           ‘essential’ attributes between two models. Here, the term
          is a corresponding element in the other, producing identical           ‘essential’ is contingent upon the specific characteristics
          outcomes under identical conditions, thereby retaining the             that are deemed critical or relevant to the models under
          model structure.                                                       examination.
             Next, we turn our attention to category equivalence.                   To elucidate further, equivalence in the MoD context is
          The models in MoD can be interpreted as categories,                    reminiscentofcongruence,andthisisparticularlyvividwhen
          with individual components serving as objects and their                considering models for their interchangeability, structural
          interrelations as morphisms. A functor F           :  A → B            resemblance,andpotentialreuse.Toappreciateitsutility,one
          maps objects and morphisms in A to those in B. Similarly,              might look towards the realm of algorithm analysis. Here,
          a second functor G : B → A is described. Natural                       distinct sorting algorithms like bubble sort and merge sort
          isomorphisms are introduced by two sets of morphisms:                  could be seen as equivalent if the primary focus is on the
          η : id       → G◦F and µ : F ◦ G → id , both of
                   A                                            B                endresultofsorting,ratherthanperformancemetricsortheir
          whichmeetthecoherencerequirementsofbeingbothnatural                    internal mechanisms.
          and isomorphic. These functors and natural transformations                Similarly,indesignrepresentation,diverserepresentations
          establish an equivalence of categories, indicating the models          such as a visual design schema, a layout portrayal, and a
          are structurally analogous.                                            textual description of the same design may be perceived as
             The equivalence property within the model-of-design                 equivalent if the assessment pivots around the structural or
          framework, which borrows from both isomorphisms and                    functional integrity of the design. Though these methods of
          category equivalences in category theory, proves invaluable            representation differ in format, they encapsulate identical
          whenanalysing various design models and scrutinising their             fundamental design attributes. Consequently, they can be
          suitability for reuse and interchange. This includes:                  interchangeably used without compromising the core design
             • Structural analysis: Through the equivalence property,            information.
                different models can be analysed structurally. Identify-            Thus, the emphasis is on discerning and juxtaposing the
                ing two equivalent models implies they have matching             ‘essential’ facets of the models in question. By doing so, the
                structural properties, regardless of the specifics of            power of the equivalence property in the MoD framework
                their individual components. This capability enables             is harnessed, amplifying the analysis, reuse, exchange, and
                high-level comparisons of different designs or models,           interoperability of different design models, culminating in
                setting aside the finer details.                                 morestreamlined and potent design processes.
             • Modelreuse:Iftwomodelsareprovenequivalentunder                       In essence, the equivalence property within the MoD
                certainconditions,onemodelmightberepurposedinthe
                stead of the other without altering the entire system’s          framework is a potent tool, amplifying the analysis, reuse,
                function. This facilitates capitalising on pre-existing          exchange, and interoperability of distinct design models,
                models,curtailingthedurationandeffortincraftingnew               culminatinginmorestreamlinedandpotentdesignprocesses.
                designs.                                                            Building on the equivalence foundation and the focus on
             • Model exchange: In the same vein, equivalent models               optimising design processes, we naturally progress to an
                canbeexchangedwithease,introducingmoreadaptabil-                 equally vital aspect of the MoD framework: the intricate
                ity into the design process. This is particularly beneficial     property of correctness. Grasping this concept, especially
                in intricate systems with multiple interacting models,           in its abstract form, presents a challenging yet rewarding
                as analogous models can be introduced or replaced as             endeavour.
                necessary without compromising system efficiency.
             • Simplification and abstraction: The equivalence prop-                Property 15. Correctness (γ)
                erty can be instrumental in streamlining complex                    Correctness: is a concept that is used to reason about:
                                                                                       • specification correctness (γ ) implying a validated
                models. If a convoluted model corresponds to a more                                                     s
                straightforward one, the latter can be employed for                       specification freedom from errors considering wrt
                analysis, easingthecomprehensionofsystemdynamics.                         intended requirements (relates to correctness-of-
                This fosters enhanced abstraction, which is pivotal in                    specifications),
                                                                                       • architectural correctness (γ ) implying verified or
                navigating the intricacies of design procedures.                                                       a
             • Interoperability: Establishing equivalence between var-                    equivalence checking for the architecture freedom
                ious design models augments interoperability - an                         from errors considering its correspondence to
                                                                                          correct composition (relates to correctness-of-
                essentialaspectwhenmodels,shapedbydisparateteams                          composition),
                or tools, are intended to coalesce. Proving equivalence

          116338                                                                                                                      VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

                                                                           turn-aroundtime(TAT),synonymouswiththetimetodesign,
               • evaluation correctness (γ ) implying the evaluation       and the desired level of correctness.
                                          e
                 freedom from errors considering the degree of                The paradigm of correct-by-construction computing sys-
                 accuracy associated with the evaluation wrt each          tem design processes can be interpreted as encompassing
                 functional or extra-functional metric being evalu-        all facets of correctness, including specification correct-
                 ated (relates to correctness-of-evaluation),              ness, architectural correctness, evaluation correctness, design
               • design correctness (γd) implying that design deci-        correctness, and implementation correctness. The presented
                 sions can be verified wrt freedom from errors             concept of correctness extends Sifakus’ notion by incor-
                 considering the transformation from specifications        porating abstraction and refinement considerations between
                 to implementations honouring design rules (relates        different levels of abstraction. This is particularly relevant in
                 to correctness-by-design),                                system or high-level synthesis, model-to-model refinement,
               • implementation correctness (γ ) implying imple-           and vertically-oriented design problems like platform-based
                                                i
                 mentation correctness freedom from errors con-            design and model-driven engineering, exemplified in the
                 sidering faults and failures that occur during            traditional double-roof model by Keutzer et al. [7], [36].
                 implementation e.g. during deployment of pro-                The interpretation of correctness here diverges from the
                 grams and manufacturing (relates to correctness-          conventional correct-by-construction concept as it specifi-
                 by-construction).                                         cally refers to the physical production of the implementation
                                                                           model within the context of electronic system design, such
            As such, for a design to be correct (in the sense of           as integrated circuits and systems-on-chips. In contrast,
          Sγ,γ ,γ ,γ ,γ), each model X ∈ o|m|MoSA.s and Y ∈                Sifakus’ interpretation focuses on the assembly of abstract
              s  a   e  d   i                     c|      τ.e              components. Further exploration of the correctness concept
          o|m|MoIA.s that belongs to a coherent MoD, Y |H X.               in relation to contracts, component-based design, interfaces,
          c|      τ.e
            Theconceptofcorrectness(γ)asdefinedhereisacompre-              and the derivation of interesting properties and theories
          hensive umbrella term that encompasses various dimensions        from these notions has been extensively addressed in
          of correctness related to different aspects of a model-of-       Benveniste et al. [32].
          design (MoD) - specifically, specification correctness (γ ),
                                                                    s
          architectural correctness (γ ), evaluation correctness (γ ),
                                      a                             e       C. PROPOSITIONS AND COROLLARIES
          designcorrectness(γ ),andimplementationcorrectness(γ ).
                               d                                    i      Drawing from the properties, core constituents, and founda-
          Each of the five categories of correctness is intrinsically      tional constructs we have outlined, this subsection presents
          tied to different facets of the model. The specification,        key propositions and corollaries that underscore the sig-
          architecture, evaluation, design decisions, and implementa-      nificance of the model-of-design framework. Specifically,
          tion all have inherent correctness conditions that need to       these findings illuminate the conditions under which a model
          be satisfied for the model to be considered correct as a         of design can be automated and the criteria for ensuring
          whole. The last sentence of the definition essentially states    its correct automation, thus offering insights into the very
          that for an implementation model (Y) to be correct with          essence of design modelling.
          respect to a specification model (X), the implementation
          must satisfy (or model) the specifications - a necessary
          condition for correctness in many design and development            Proposition 1. Criteria for Potential Automaticity
          processes. It underlines the fundamental requirement of             A design can be potentially automated iff it can be
          coherence within a MoD, which necessitates congruence               describedasamodelofdesign,inawaythatisdecidable
          and consistency between all its constituent models and their        and coherent.
          transformations.
            In essence, the notion of correctness underscores the               Proof: The proposition states that a design can be
          coherency of a design, stipulating that the outputs of           potentially automated if and only if it can be described as
          the design models should accurately mirror the provided          a model of design in a way that is decidable and coherent.
          specifications. In some design models, the verification          Hereishowthereasoningandproofforthispropositioncould
          process can be incorporated within the evaluation model          be laid out, based on the definitions and properties we have
                                                                ∼
          itself, as expressed by the formula MoE(MoI,MoS,        ) =
                           ∼                                    =          discussed so far:
          true, false. Here, = symbolises the categorical equivalence of
          models, also known as congruence.                                   • The essence of a model of design is that it provides
            The level of correctness required is directly proportional          a formalised, systematic way to represent and reason
          to the established criteria for acceptable degrees of accuracy,       about design problems. It does this by capturing and
          test coverage, and verification coverage. As the demand for           integrating different aspects of the design – its specifi-
          correctness escalates, it necessitates an increase in evaluation      cations, architecture, and implementation – as well as
          and design efforts, thereby calling for more computational            the design decisions and evaluation rules that guide the
          resources. This highlights a potential trade-off between the          transformation from specifications to implementation.

          VOLUME11,2023                                                                                                           116339
                                                                                       T. Mohammadat: MoD for Computing Systems: A Categorical Approach

             • Decidability, in this context, refers to the idea that there      thepotentialtobeautomatedwhenthecriteriaondecidability
                exists a finite procedure (algorithm) that can determine         and coherence are satisfied.                                   □
                whether a given design satisfies its specifications. For a          Having established the foundational relationship between
                design to be decidable, it must be possible to formalise         the potential for automation and the properties of the model
                thedesignprobleminsuchawaythatthisprocedurecan                   of design, we now delve into the specific criteria that ensure
                be applied.                                                      correct design automation.
             • Coherence, on the other hand, refers to the consistency
                andcompletenessofthedesign.Acoherentdesignisone                     Proposition 2. Criteria for Correct Design Automa-
                whereallthedifferentaspectsofthedesign-thespecifi-                  tion
                cations, architecture, implementation, design decisions,            Adesignofanembeddedcomputingcanbeguaranteed
                andevaluationrules-fittogetherinaconsistentwayand                   to be automated and correctly implemented iff the
                provide a complete picture of the design.                           criteria on decidable, coherent, and deterministic model
             Given these properties, we can make the following                      of design are met, with:
          argument:                                                                    • valid model of specifications, φ,
            1) By capturing the design problem in a MoD, we can                        • verifiable to the maximum degree, VC = 1, and
                represent it as a formal model. This makes it possible                   solvable design decisions and evaluation model,
                to apply systematic reasoning and computation to the                     tothehighestdegreeofaccuracy(ideallyabsolute),
                design.                                                                • testable to the maximum degree, TC = 1, model of
            2) If the design is decidable, then we can construct                         implementation,
                an algorithm that determines whether a given design                    • ample computational resources,
                satisfies its specifications. This means that we can                   • Complete consideration of practical design con-
                automate the process of checking the design against its                  straints reflected within the model of specifica-
                specifications.                                                          tions, and specific design complexities, which
            3) If the design is coherent, then all its parts fit together                are inherent in the design rules and architectural
                in a consistent and complete way. This means that we                     choices.
                can automate the process of integrating these parts into               • a fully controlled design environment with no
                a complete design.                                                       variability or randomness.
            4) By combining steps 2 and 3, we see that if a design
                is both decidable and coherent, then we can automate                  Proof: This proposition follows from the MoD frame-
                both the process of checking the design against its              workasfollows:
                specifications and the process of integrating the parts of          • Validity of model of specifications (φ): According to the
                the design into a complete whole. This means that the                 MoD,avalid model of specifications (MoS) accurately
                design process itself can be automated.                               representstherequirementsandconstraintsofthedesign
             This reasoning suggests that if a design can be represented              problem. If the MoS is not valid, the rest of the
          as a decidable and coherent MoD, then it has the potential to               design process may not yield a correct solution, as it
          be automated. It is important to note, though, that this does               would be based on flawed or incomplete specifications.
          not guarantee that the design can be automated in practice                  Therefore, validity of MoS is a prerequisite for correct
          – only that it has the potential to be. Practical automation                design.
          would also depend on other factors, such as the availability              • Verifiability and Solvability of design decisions and
          ofsuitablecomputationalresourcesandthecomplexityofthe                       evaluation model: In the MoD framework, design
          design problem.                                                             decisions are made based on the evaluation model
             Wecangive further credence to Proposition 1 as follows:                  (MoE). Verifiability ensures that the outcomes of these
          by describing the design problem in model of design                         decisions can be checked against the MoS. Solvability
          vocabulary means it can be translated into formal models                    ensures that for every design decision, there exists an
          for specifications, architectures and design rules, since                   acceptable solution that can be reached through the
          all of these models are language-based (see Foundational                    application of design rules. If MoE is not solvable or
          Construct 1). The criteria on decidability and coherence                    verifiable to a degree of 1, it may result in incorrect or
          implythesolvabilityandcompletenessofthemodelofdesign                        unsolvable designs.
          to use design decisions and evaluations to correctly derive               • Testability of models of implementation: According to
          an implementation. By simplifying the automation problem                    the MoD,amodelofimplementation(MoI)isaproduct
          of the realisation of the model of design as a compilation                  of the design process. If the MoI is not testable to a
          problem that transforms a computer language to another                      degree of 1, it might not be possible to fully verify that
          and by process of induction from theories developed for                     the implementation meets the specifications, leading to
          compilers and formal languages, we can deduce that if a                     inability to ascertain the freedom from potential errors
          design problem can be captured by a model of design, it has                 in the final product.

          116340                                                                                                                     VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

             • Ample computational resources, practical design con-                II Applying Yoneda (lemma): Given an ideal design
                straints, and specific design complexities: These factors             component A in C, according to the Yoneda Lemma,
                are inherently associated with the design process.                    the entire nature of A (or its specification, in design
                If these are not taken into consideration, the design                 terms) can be determined by considering all possible
                process may not lead to a feasible and optimal solution,              interactions (morphisms) from all possible components
                despite the design being decidable, coherent, determin-               (objects) to A.
                istic, and meeting all other conditions.                            Now,let us relate this to the proposition. Assume a design
             • Controlled design: Variability or randomness in the               componentAwhichsatisfiestheconditions mentioned in the
                design environment can introduce uncertainty in the              proposition:
                design process, which can lead to incorrect or sub-                i If the model of specifications, φ, is valid, it means that
                optimal solutions. Therefore, a controlled environment               every morphism leading into A is well-defined, ensuring
                is necessary to guarantee the performance accuracy of                the correct nature of A.
                the final design.                                                 ii The verifiability and solvability of design decisions
             In the proposition, several ideal conditions are mentioned,             ensurethateverymorphism(relationship)intoAfromany
          such as maximum verifiability and testability (VC = TC                     other object (design component) in C is both achievable
          = 1), highest degree of accuracy, and fully controlled                     (can be constructed) and can be checked against φ.
          environment. These ideals represent the best-case scenarios,            iii Testability of the model of implementation ensures that
          where every aspect of the design process is under perfect                  the practical (or implemented) morphisms into A truly
          control and can be measured with absolute precision.                       represent the ideal interactions, i.e., the morphisms in C.
          In practice, however, these ideals may not be achievable due            iv UsingtheYonedaLemma,weinferthatifallinteractions
          to various limitations and uncertainties inherent in the design            (morphisms) into A from any object are correctly
          process.                                                                   defined and implemented, then the intrinsic nature (or
             Nevertheless, these ideals serve as guiding principles                  specification) of A is as intended. Thus, A is correctly
          for the construction of design flows. By striving towards                  designed and implemented.
          these ideals, one can continuously improve the design                     Therefore, by the Yoneda Lemma, if all criteria in the
          process, aiming for higher degrees of verifiability, testability,      are met, the design of an embedded computing system
          accuracy, and control. These improvements can lead to more             is guaranteed to be automated and correctly implemented.
          efficient, reliable, and robust designs, thereby advancing the         This inference has transformed the problem of design
          quality of computer system design.                                     correctness into a categorical one, where the Yoneda Lemma
             To further support Proposition 2, we can consider the               can be applied. Through this lemma, we have provided a
          following: by Property 15 and the Notes 3, 4 and 5, it follows         foundational reasoning for why the proposition holds.          □
          that a design process with the criteria in Proposition 2                  From the conceptual framework of the models and the
          can have implementation that are correct, to the degrees               propositions given for the criteria for potential automaticity
          of validity, verifiability, testability and accuracy stated            and correctness, the following corollaries and implications
          therewith. From the remarks and proposition 1, it follows              can be derived:
          that a design process with such properties may also be
          automated.
             We could also employ results from category theory to                   Corollary 1. Design Models Reuse
          strengthen the credence of the proposition through the                    Design models within different models of design can
          applicability of the Yoneda Lemma to the model of design.                 be reused iff they belong to models that are equivalent
          To apply the Yoneda Lemma to the correctness of the                       (X ≃Y,(SeeequivalenceinProperty 14).
          proposition, we must translate our design problem into                    The proliferation of different design methods, techniques,
          categorical terms and then use the lemma to deduce certain             architectures, and evaluation poses a question on whether
          properties about our designs. The Yoneda Lemma builds on               someofthemcanbereusedwithinotherestablishedmethod-
          the Yoneda Embedding (see Foundational Construct 3) and                ologies. By capturing established design methodologies as
          essentially states: For any category C and an object A in C,           models of design, assessing whether or not they can be
          thefunctorHom(−,A) : C → Setsisrepresentable,i.e.,there                enhanced by incorporating other models (of specifications,
          exists a bijection between Hom(X,A) (morphisms from X to               architecture, evaluation) can be possible through Corollary 1.
          A) and the natural transformations from Hom(−,A) to any                Thecorollary helps us re-frame the question to be a question
          functor F : C → Sets. This bijection is natural in X. To apply         onmodelcongruence.Whilethecorollarymightseemtrivial,
          this lemma to our model of design (MoD):                               animplication of it is that if we were to enable design results
             I Categorical representation of MoD: Let C be our cate-             exchange between system level design, we need to establish
               gory where objects are design components or modules,              or adopt common (standardised) languages for design
               and morphisms represent relationships or interactions             capture (specification), simulation/analysis (evaluation) and
               between these components.                                         implementation.

          VOLUME11,2023                                                                                                                     116341
                                                                                 T. Mohammadat: MoD for Computing Systems: A Categorical Approach

            Corollary 2. Design Composability                                    • architectures that satisfy extra-functional specifi-
            Models within different models of design are compos-                   cations and are predictable to allow sound design
            able iff each model is individually analysable and the                 decisions;
            superset of all the models are analysable and coherent.              • evaluation models, MoE, that are accurate to the
            As more full or partial design methods and flows become                extent needed by the design to allow credible
          available, each with their own strengths and weakness,                   qualitative results and comparative analysis.
          composing superior design flows and methods become of                  • design decisions and evaluation models that are
          interest. Corollary 2 can guide such compositionbyimposing               solvable/decidable for the design problem/objects:
          two criteria on the possibility of such composition on the             • since MoD relies on coherence of constituents,
          analysability of the individual models and the coherence of              a required criterion as a priori is provably
          thecompositemodel.Forexample,toenabletheconstruction                     correct   transformational    design    refinements
          of a composite design flow using the specification model for             with   assume-guarantee     relationships  between
          ForSyde [18] and the implementation model of CompSOC                     transformed components.
          [37], 1) each of the models need to be individually analysable
          and 2) the composition needs to be semantically and                 To have a (system level) design automation framework,
          syntactically coherent. This usually leads to the question on     does not necessarily mean it can give rise to outputs
          the existence of an evaluation model for CompSOC MoI              that are correct-by-design. Corollary 4, capitalises on the
          that is compatible with ForSyDe MoS, and whether there            concept of correctness defined in Property 15 and spells out
          exists design decisions algorithms for converting ForSyDe         various criteria for what could be made to enable correct
          MoSintoCompSOCMoI.Thisinsightcanalsobeappliedto                   construction of design automation methods of computer
          similar hardware/platform generators such as in the network-      hardware/software codesign.
          on-chip system generator (NSG) [38].
                                                                              Corollary 5. Constructing Design Flows
            Corollary 3. Computer-aided HW/SWCodesign                         The concept of a model of design inherently accounts
                                                                                                             A.s
                                                                              for development stages (MoD       ) and different design
            General-purpose and application-specific computing                                               τ.e
            systems can be described using MoD formalism. When                decisions, thus enabling us to formally construct
            that is made, formal methods, compilation, synthesis              various design flows. These flows are a description
                                                                                                                                   A.s
                                                                              of possible design decisions at different stages (1    )
            and optimisation methods can be used to design                                           A.s                           τ.e
            such systems to achieve superior quality of results               and relevant rules (3τ.e), considering aspects such as
            with respect to extra-functional requirements or faster           the functional specification descriptions in MoF, extra-
            turn-around time with respect to design automation                functional requirements in MoX, architectural solutions
            time, through more efficient evaluation and design                in MoA, evaluation frameworks in MoE, and possible
            exploration.                                                      implementation in MoI across different abstraction
                                                                              levels.
            The existence of design method is not the same thing              Examples for design flow construction:
          as having system-level computer-aided hardware/software
          co-design automated flows. In fact, as far as our literature         • High-level synthesis Flow: We can define an MoD as
          survey work is concerned, there are no complete system-                a transaction-level to RTL (Register-Transfer Level)
          level computer-aided hardware/software co-design flow.                 transformation process. In this flow, we start with func-
          Corollary 3 remarks that such design automation can be                 tional specifications (MoF) and extra-functional speci-
          guided by the appropriate formalism of the design issue in             fications (MoX) related to latency and area constraints,
          question.                                                              whichmightbedescribedinaformatlikeSDC(Synop-
                                                                                 sis design constraints). The architecture model (MoA)
                                                                                 could be a globally-asynchronous locally-synchronous
            Corollary 4. Design Correctness                                      (GALS)digitaldesign,incorporatingfull-scantestlogic
            For potentially automatic and correct MoD to hold to                 and JTAG debugging features. For the implementation
            a reasonable extent, the following principles can be                 model (MoI), the target output is an RTL level HDL
            considered as a consequence of proposition 2:                        (hardwaredescriptionlanguage),suchasVHDL.Design
               • complete analysable specification models, i.e.                  decisions (1) and evaluations might involve selecting
                 Turing-complete functional models and design-                   architecturesforcomputingandcommunication,control
                 purposecompleteextra-functionalmodels,toallow                   logic inference, syntactic checking, data type transfor-
                 effective design specification capture;                         mation,re-timing,andmemoryinference.Anevaluation
                                                                                 model (MoE) for the latency and area might include a

          116342                                                                                                             VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

               layout estimator and logic equivalence checks or logical     wish to use the simulation and synthesis engines provided
               functional simulations. Design rules (3) could cover         by Daedalus for HOPES input specifications in a flow that
               criteria for testability and scheduleability, and rules      is potentially automatic and correct, we can use proposition 2
               for non-synthesisable constructs usage in System-C or        to guide us in that exercise in examining:
               VHDL.Thiscanbefurtherconnectedtovariousexisting               1) the coherence in term of syntax and semantics of the
               digital IC flows from Synopsis or Cadence, or FPGA                unified model of design
               flows from Intel, AMD/Xilinx or Microsemi.                    2) the decidablity of the unified model of design
            • Reconfigurable systems flow: In this scenario, we can          3) theverifiabiltyofthedesigndecisionswithinthecontext
               define an MoD as a transaction-level to combined                  of the unified of design
               RTL/ELF (executable and linkable format) transforma-          4) theaccuracyoftheevaluationmodelswithinthecontext
               tionprocess.ThisflowinvolvespartitioningofSimulink                of the unified of design
               blocks into M files that can be further transformed into      5) the synthesisablity and testability of the implementation
               transaction-level for functional specifications (MoF)             models within the context of the unified of design
               and extra-functional specifications (MoX) regarding           6) the validity of intermediate specification models across
               latency and area constraints. Similar to the first flow,          abstraction levels, hierarchies and development stages
               these might be presented in a format like SDC,                 Another interesting implication of capturing design meth-
               as input for the high-level synthesis flow above. The        odsasdesignmodelsisthatitcanenableelevateddiscussions
               architecture model (MoA) could be a multi-processor          regarding how a design methodology can be improved to
               system-on-chip with reconfigurable features. A possi-        cover different design problems, by extending the specifica-
               ble implementation model (MoI) could target devices          tion model or the architectural models. Other improvement
               like AMD/Xilinx Ultrascale or Intel Agilex, which            works can be in relation to the accuracy and efficiency of
               have embedded local memory and ARM-A profile                 design decisions and evaluation models.
               RISC multi-core processors for software computation
               described in ELF (executable and linkable format)            IV. DISCUSSIONS AND RELATED WORK
               files. This is in addition to hardware accelerator logic     In this paper we presented a model of design, which we
               derived from an RT abstraction space language such           can consider as a category of design models C that captures
               as VHDL. Design decisions (1) and evaluations might          the different components or aspects of the design, such
               involve architecture selection for hardware/software co-     as models of specification (MoS), models of architecture
               designing, software compilation, resource allocation,        (MoA), models of evaluation (MoE), models of imple-
               on-chip network design, and memory and peripheral            mentation (MoI), and design decisions/rules (1/3). The
               management. An evaluation model (MoE) for the                objectsinC representthespecificinstancesorrepresentations
               latency and area might include a memory consumption          of these components, while the morphisms represent the
               evaluator and programmable logic estimator. Design           transformations or mappings between these objects. We then
               rules (3) could cover criteria for software debugging,       use the theorems and axioms from category theory, to assist
               hardware/software composability rules and security           reasoning about the design models such as:
               checksforoff-chipmemoryandnetworks,andbitstream
               booting.                                                      1) Composition: The composition of morphisms in the
            AconsequenceofMoDbeingacompositeofothermodels,                       category allows us to combine and sequence transfor-
          is that classes based on the complexities of the sub-models            mations between models. Given two morphisms f          :
          can be constructed. In the same way MoCs are specified                 A → B and g : B → C, their composition g ◦
          as dynamic versus static, and architectures can be classified          f : A → C represents the transformation obtained by
          on basis of topologies or processor/software complexities,             applying f followed by g. This property ensures that
          and evaluation models can be different depending on                    transformations between models can be composed in a
          what analysis methods/ accuracies can give rise to, design             consistent manner.
          problems can be categorised into classes.                          2) Associativity:Thecompositionofmorphismsisassocia-
                                                                                 tive, meaning that for any three morphisms f : A → B,
            Corollary 6. MoD as a Taxonomy                                       g : B → C, and h : C → D, the composition is
            Design problems and methods can be classified under                  associativeas(h◦g)◦f = h◦(g◦f).Thispropertyensures
            MoDformalismtoenablecomparativeanalysisbetween                       that the order in which transformations are applied does
            different methods and the composition of more sophis-                not affect the final result. In the context of model of
            ticated design methods.                                              design, it ensures that the sequence in which design
                                                                                 transformations are applied does not impact the overall
            Aninteresting implication of capturing design methods as             design outcome.
          models of design is that, it can enable posing questions that      3) Identity morphisms: For every object A in the category,
          can help in design method resuse. For example, if we take              there exists an identity morphism id         :   A →
                                                                                                                          A
          two design methods Daedalus [39] and HOPES [40], and                   A that serves as the neutral element with respect

          VOLUME11,2023                                                                                                            116343
                                                                                T. Mohammadat: MoD for Computing Systems: A Categorical Approach

               to composition. The identity morphism preserves the         such as platform based design, hardware-software codesign,
               structureorpropertiesoftheobjectwhencomposedwith            and abstraction layers in software. For example, within
               other morphisms. In the context of model of design,         platform-based models, they used: functionality (model of
               identity morphisms allow for the preservation of the        functionality), market (guiding specification), and structure
               original properties and structure of the models during      (architecture). For hardware-software co-design, they also
               transformations.                                            discussedtheplanedescribingtheinteractionsbetweenhard-
            By leveraging these properties, we can reason about the        ware, software, hardware-dependent software (firmware),
          compatibility between models and ensure that the transfor-       and manufacture (implementation of system). Within the
          mations applied to the models preserve their properties and      software domain, they described the relationship between
          structure. These properties also facilitate the development      high-level objects, (low-level) code, real-time system and
          of reasoning techniques and tools for analysing the impact       hardware. Our model of design concept shares several of
          of transformations on the design, identifying compatibility      theseaspectswhilegivingemphasisfortheevaluationmodels
          issues, and ensuring the correctness and integrity of the        and design rules that were not explicitly captured in the
          design process.                                                  TDVDSworks.
            When examining design problems within engineering                However,otherworkshavetoucheduponrelatedconcepts.
          contexts, transitioning from abstract concepts to specific       EckerandSchreiner[44],forinstance,introducedthenotions
          applications uncovers shortcomings in current design meth-       of model-of-design and model-of-thing, mostly discussing
          ods. These limitations include inhibiting correct automation     templates and views useful for hardware generators. While
          and restricting design reuse across methodologies, often due     hardware generators are crucial, we argue that limiting
          to inconsistencies in design decisions and discrepancies in      design problems to hardware generators provides a narrow
          the syntax and semantics of modelling languages. In addi-        view of the concept within system-level and cross-level
          tion, gaps exist in the transformation process of several        computer systems design or in hardware/software codesign
          extra-functional industrial requirements and standards, thus     and cosynthesis context.
          further obstructing automation.                                    Densmore et al. [30] offered a taxonomy related to
            We observe echoes of these issues in the works of              platform-based design at the system level and linked this
          numerous researchers. For instance, in ‘‘System Design           taxonomy to the Gajski-Kuhn Y-chart. Although their
          Automation: Challenges and Limitations’’ Joseph Sifakis          platform-based taxonomy is fascinating for mapping prob-
          [10] promotes system design as a process involving end-to-       lems, it does not necessarily delve into the role of generic
          end, correct-by-construction, and scalable transformations.      architectures and their relation to extra-functional specifica-
          He advocates for achieving semantic coherency using a            tions in the context of design.
          unified component framework and leveraging existing ‘con-          Moreover, the RASSP taxonomy and the Rugby model by
          structivity’ results for the development of rigorous system      Jantschetal.[45],[46]warrantinterest.Rapid-prototypingof
          design flows.                                                    Application Specific Signal Processors (RASSP) workgroup
            Alberto Sangiovanni-Vincentelli et al. also shared relevant    published a flat taxonomy that shares many concepts
          insights, stating that the main challenges in adopting           with our framework, using information and time as main
          platform-based design methodologies (PBD) relate to the          axes of design abstractions. However, their work lacked
          absence of precise definitions and characterisations of          a hierarchical structure through architectures, evaluation,
          platforms and their associated design flows in the industry      computation, and design decisions that our model of design
          today [30], [41], [42]. This vagueness creates difficulties      provides.
          whentransitioning designers from traditional methodologies         Onadifferentnote,theRugbymodelrepresentselectronic
          such as ASIC flow to the PBD paradigm and developing the         system design as a progression from design idea (high
          necessary tools to support this paradigm.                        abstraction) to physical system (low abstraction), tracked
            Since these challenges were first published between            over a development time axis. They captured data and
          2000and2015,nocommonframeworkresemblingthework                   time as considerations for the design’s development through
          detailed here has emerged. A possible exception is B. Baily,     abstraction levels. Yet, they overlooked the relation of design
          G. Martin, and T. Andersson’s 2005 book ‘‘Taxonomies             activities to the evaluation or architectural or extra-functional
          for the Development and Verification of Digital Systems’’        aspects.
          (TDVDS)[43],whichprovidedratherunifyingdefinitionsfor              Lastly, Ecker et al.’s 1996 work [47] proposed a specific
          several industrial concepts, including system models, archi-     model for VHDL design flow representation, adding testing
          tectures and design processes. In their work, they compiled      to the Y-chart. While this model contributes a testing element
          several views on the relevant axes using four main areas:        to the design problem, it does not address verification aspects
          1) temporal detail, 2) data value detail, 3) functional detail,  of design (i.e., are we building the thing right?) or the
          and4)structural detail. The work defined concise definitions     validation of requirements (i.e., are we building the right
          for the degrees and granularities involved in each of the        thing?). Also, their design cube did not clearly define the
          four dimensions. Furthermore, the taxonomy clarified the         roles of architectures or the evaluation of extra-functional
          relation between the taxonomy and other existing concepts        requirements.

          116344                                                                                                           VOLUME11,2023
          T. Mohammadat: MoD for Computing Systems: A Categorical Approach

            Aspreviously discussed, we consider the MoD concept to            • The MoD concept can be applied beyond embedded
          be not only compatible but also dependent on formalism like           computing systems to a wide spectrum of com-
          MoCsandMoA,inadditiontoalreadyexistingviewsonaca-                     puting technologies including general-purpose, high-
          demicsystemdesignmethodologies like: PBD, CBD, MBD,                   performance, and consumer systems (Corollary 3).
          etc. When compared with design methodologies double-roof              Multiple models of functionality (MoF) and models of
          modelforhardware/softwareco-synthesis[31],[36],wenote                 extra-functionalspecifications(MoX)cancharacterisea
          that the software/hardware implementation models map to               broad range of benchmarks. This method is particularly
          MoI and the top-level specifications map to our MoS;                  beneficial for manufacturers and suppliers of processors
          the difference between MoD concepts and the double-roof               and electronics and is aligned with established method-
          and the X-chart is the explicit distinction/emphasis on               ologies.
          the evaluation models and the development stages. When              • The MoD can address design challenges of emerg-
          compared with industrial practices such as the V-chart,               ing technologies and applications, including non-Von
          we note the similarities of having development stages                 Neumann and more-than-Moore systems, quantum
          including requirement, architecture, design and development           computing, and large-scale language models (Corollar-
          engineering efforts in the models, but we also note that              ies 1, 2, 3, 4). The MoD provides a structured approach
          MoDaddstheexplicit invocation of the different abstraction            tosolvingthesolvability,automation,andcorrectnessof
          levels and evaluation models over design components. The              such design problems, bridging the productivity gap in
          Gajski-Kuhn Y-chart [15], [17] has inspired the MoD                   complex system design.
          concept and therefore share all its constituents, however,          • The MoD allows for the construction of formal design
          MoDaddstheexplicit modelling of extra-functional aspects              methodologies by outlining design decisions at various
          and evaluation models. OMG model-driven architecture                  stages and relevant rules (Corollary 5). Examples
          (MDA) principles had also inspired the development of                 include high-level synthesis flows and reconfigurable
          MoDconcept,especiallyinthedefinitionofmodel-to-model                  system flows.
          transformations as a critical component in design decisions,        • With MoD, design problems and methods can be
          MoD adds to it the explicit invocation of behavioural                 systematically classified, enabling comparative analy-
          modelsandmodelofcomputationstoallowsoundanalytical                    sis and composition of sophisticated design methods
          formaltransformationsthatarepotentiallycorrect-by-design.             (Corollary 6). This aids in identifying missing elements
          Kienhuis’ Y-chart has significantly influenced the definition         in existing designs and requirements for automation and
          of MoD concept, but we included the development stages to             CADtools.
          allow the cross-compatibility with engineering practices, e.g.
          technology readiness levels and engineering change orders.
          Moreover, MoD extends frameworks such as Component
          based Design/Integration/Construction (CBD/CbC) such as          V. CONCLUDINGREMARKS
          BIP by the inclusion of evaluation models, design decisions,     This paper offered a model of design (MoD) concept
          and design rules. MoD extends Platform-based Design              for describing design problems of computing systems in
          and meet-in-the-middle concepts by the explicit inclusion        a consolidated way while keeping in view the intrigu-
          of development stages. MoD extends Model based/driven            ing sub-problems of evaluation, model transformation and
          Engineering/Development/Architecture (MBD/MBE/MDA)               optimisation to satisfy design specifications including extra-
          by introducing platform related abstraction layers and           functional ones. The key to our work is the necessity
          implementation dependent evaluation models. All in all, the      of identifying fundamental commonalities across computer
          formalism that can be adopted from the MoD concept can           design models, spanning both hardware and software appli-
          be used to allow formal methods and analyses to apply such       cations. By discerning shared characteristics, we leveraged
          as in [22] and [48], which in turn can create opportunities      foundational principles from formal languages and category
          to shortening development time and reduced verification          theory, capturing these commonalities in a structured manner
          and testing costs, by virtue of correct automatic design in      that honours the inherent complexities, facilitating a unified
          addition to optimal design outputs, by virtue of computer-       reasoning system. We then exploit the emergent properties
          aided optimisation.                                              of our conceptual framework to derive high-level insights
            This high-level overview leads to a few key insights into      into diverse design challenges. To that end, we defined
          potential applications of our model of design (MoD)concept:      five main constituents: the model of specifications (MoS),
            • The MoD framework can encapsulate various stages             model of architecture (MoA), model of evaluation (MoE),
               of design processes, useful for tracking technological      model of implementation (MoI), and design decisions/rules
               readiness, specification versioning, and engineering        (1/3). The model-of-design constituents can be expressed
               changes (Corollary 5). It allows comprehensive capture      at multiple levels of abstractions and different development
               of related design aspects like product lifecycle stages     stages. When using tools and models for constructing design
               and tool versions, facilitating different development       methodologies or flows, the model of design can help to
               practices.                                                  identify:

          VOLUME11,2023                                                                                                          116345
                                                                                                   T. Mohammadat: MoD for Computing Systems: A Categorical Approach

              1) coherencyissuesbetweenthespecifications,implemen-                          [16] A. Gerstlauer and D. D. Gajski, ‘‘System-level abstraction semantics,’’ in
                  tation and architectural models,                                                Proc. 15th Int. Symp. Syst. Synth., 2002, pp. 231–236.
              2) the degree to which correctness can be achieved with                       [17] D. D. Gajski, S. Abdi, A. Gerstlauer, and G. Schirner, Embedded System
                  regards to the accuracy of evaluation models and design                         Design: Modeling, Synthesis and Verification. Springer, 2009.
                                                                                            [18] I. Sander and A. Jantsch, ‘‘System modeling and transformational design
                  decisions, verification coverage, and test coverage,                            refinement in ForSyDe,’’ IEEE Trans. Comput.-Aided Design Integr.
              3) the efficiency of the overall system design with respect                         Circuits Syst., vol. 23, no. 1, pp. 17–32, Jan. 2004.
                  to the degree to which the evaluation models and design                   [19] R. von Hanxleden, B. Duderstadt, C. Motika, S. Smyth, M. Mendler,
                                                                                                  J. Aguado, S. Mercer, and O. O’Brien, ‘‘SCCharts: Sequentially con-
                  decisions are solvable and decidable, and                                       structive statecharts for safety-critical applications: HW/SW-synthesis
              4) development strategy for the design problem across                               for a conservative extension of synchronous statecharts,’’ in Proc. 35th
                  hierarchies and abstraction levels that evolves over time.                      ACM SIGPLAN Conf. Program. Lang. Design Implement., Jun. 2014,
                                                                                                  pp. 372–383.
            Wehaveidentified several future research avenues related to                     [20] A. Bouakaz, P. Fradet, and A. Girault, ‘‘A survey of parametric dataflow
            the model of design concept, including:                                               models of computation,’’ ACM Trans. Design Autom. Electron. Syst.,
                                                                                                  vol. 22, no. 2, pp. 1–25, Apr. 2017.
               • Formulatingtheoremsthatfacilitatetheconstructionand                        [21] S.Stuijk,M.Geilen,B.Theelen,andT.Basten,‘‘Scenario-awaredataflow:
                  reuseofdesignmethods,cateringtodifferentabstraction                             Modeling,analysisandimplementationofdynamicapplications,’’inProc.
                  levels and development stages.                                                  Int. Conf. Embedded Comput. Syst., Architectures, Modeling Simulation,
                                                                                                  Jul. 2011, pp. 404–411.
               • Harnessing the ontological attributes of the design                        [22] L. Lamport, Specifying Systems: The TLA+ Language and Tools for
                  model to systematically examine and understand con-                             HardwareandSoftwareEngineers. 2002.
                  temporary advancements in the field.                                      [23] T. Villa, A. Petrenko, N. Yevtushenko, A. Mishchenko, and R. Brayton,
                                                                                                  ‘‘Component-based design by solving language equations,’’ Proc. IEEE,
               • Establishing distinct classes within the model of design                         vol. 103, no. 11, pp. 2152–2167, Nov. 2015.
                  to address a range of design problems more effectively.                   [24] Interface Definition Language Version 4.2, OMG Document Number,
                                                                                                  Object Manag. Group (OMG), Needham, MA, USA, 2018.
                                                                                            [25] D. A. Lamb, ‘‘IDL: Sharing intermediate representations,’’ ACM Trans.
            ACKNOWLEDGMENT                                                                        Program. Lang. Syst., vol. 9, no. 3, pp. 297–318, Jul. 1987.
            Theauthor would like to thank the anonymous reviewers for                       [26] J. Sifakis, ‘‘A framework for component-based construction,’’ in Proc. 3rd
            their valuable feedback on the early drafts of this paper.                            IEEEInt. Conf. Softw. Eng. Formal Methods (SEFM), 2005, pp. 293–299.
                                                                                            [27] M. J. Flynn, ‘‘Very high-speed computing systems,’’ Proc. IEEE, vol. 54,
                                                                                                  no. 12, pp. 1901–1909, Dec. 1966.
            REFERENCES                                                                      [28] Y.ChengandC.Hu,MOSFETModeling&BSIM3User’sGuide.Springer,
                                                                                                  1999.
             [1] Cisco Systems. (2023). Cisco Annual Internet Report (2018–2023).           [29] M. Stigge and W. Yi, ‘‘Graph-based models for real-time workload: A
                 [Online]. Available: https://www.cisco.com/c/en/us/solutions/executive-          survey,’’ Real-Time Syst., vol. 51, no. 5, pp. 602–636, Sep. 2015.
                 perspectives/annual-internet-report/index.html                             [30] D. Densmore and R. Passerone, ‘‘A platform-based taxonomy for ESL
             [2] F. Faggin, ‘‘The MCS-4: An LSI microcomputer system,’’ in Proc. IEEE             design,’’ IEEE Design Test Comput., vol. 23, no. 5, pp. 359–374,
                 Region Six Conf., 1972.                                                          May2006.
             [3] S. Mazor, ‘‘Moore’s law, microcomputer, and me,’’ IEEE Solid-State         [31] J.   Teich,   ‘‘Embedded     system   synthesis   and   optimization,’’
                 Circuits Mag., vol. 1, no. 1, pp. 29–38, Winter 2009.                            Tech. Rep., 2000.
             [4] E. A. Lee and A. Sangiovanni-Vincentelli, ‘‘A framework for comparing      [32] A. Benveniste, B. Caillaud, D. Nickovic, R. Passerone, J.-B. Raclet,
                 models of computation,’’ IEEE Trans. Comput.-Aided Design Integr.                P. Reinkemeier, A. Sangiovanni-Vincentelli, W. Damm, T. Henzinger, and
                 Circuits Syst., vol. 17, no. 12, pp. 1217–1229, Dec. 1998.                       K.G.Larsen,‘‘Contractsforsystemsdesign:Theory,’’Res.Rep.RR-8147,
             [5] A. Sangiovanni-Vincentelli, S. K. Shukla, J. Sztipanovits, G. Yang, and          2015.
                 D.A.Mathaikutty,‘‘Metamodeling:Anemergingrepresentationparadigm            [33] H. Kopetz, Real-Time Systems Series: Design Principles for Distributed
                 for system-level design,’’ IEEE Design Test Comput., vol. 26, no. 3,             EmbeddedApplications, 2nd ed., J. Stankovic, Ed. Springer, 2011.
                 pp. 54–69, May 2009.                                                       [34] M. Lohstroh, P. Derler, and M. Sirjani, Eds., Principles of Modeling,
             [6] A. Sangiovanni-Vincentelli and G. Martin, ‘‘Platform-based design and            vol. 10760. Springer, 2018.
                 software design methodology for embedded systems,’’ IEEE Design Test       [35] E.A.Lee,‘‘Determinism,’’ACMTrans.EmbeddedComput.Syst.,vol.20,
                 Comput., vol. 18, no. 6, pp. 23–33, Nov./Dec. 2001.                              no. 5, pp. 1–34, May 2021, doi: 10.1145/3453652.
             [7] K. Keutzer, A. R. Newton, J. M. Rabaey, and A. Sangiovanni-Vincentelli,    [36] A. Gerstlauer, C. Haubelt, A. D. Pimentel, T. P. Stefanov, D. D. Gajski,
                 ‘‘System-level design: Orthogonalization of concerns and platform-based          and J. Teich, ‘‘Electronic system-level synthesis methodologies,’’ IEEE
                 design,’’ IEEE Trans. Comput.-Aided Design Integr. Circuits Syst., vol. 19,      Trans. Comput.-Aided Design Integr. Circuits Syst., vol. 28, no. 10,
                 no. 12, pp. 1523–1543, Dec. 2000.                                                pp. 1517–1530, Oct. 2009.
             [8] E. A. Lee and A. L. Sangiovanni-Vincentelli, ‘‘Component-based design      [37] A. Hansson, K. Goossens, M. Bekooij, and J. Huisken, ‘‘CoMPSoC:
                 for the future,’’ in Proc. Design, Autom. Test Eur., 2011, pp. 1–5.              A template for composable and predictable multi-processor system on
             [9] A. Sangiovanni-Vincentelli, W. Damm, and R. Passerone, ‘‘Taming                  chips,’’ ACMTrans.DesignAutom.Electron.Syst.,vol.14,no.1,pp. 1–24,
                 Dr. Frankenstein: Contract-based design for cyber-physical systems,’’ Eur.       Jan. 2009.
                 J. Control, vol. 18, no. 3, pp. 217–238, Jan. 2012.                        [38] J. Öberg and F. Robino, ‘‘A NoC system generator for the sea-of-
            [10] J. Sifakis, ‘‘System design automation: Challenges and limitations,’’ Proc.      cores era,’’ in Proc. 8th FPGAWorld Conf. New York, NY, USA:
                 IEEE, vol. 103, no. 11, pp. 2093–2103, Nov. 2015.                                Association for Computing Machinery, Sep. 2011, pp. 1–6, doi:
            [11] S. Eilenberg and S. MacLane, ‘‘General theory of natural equivalences,’’         10.1145/2157871.2157875.
                 Trans. Amer. Math. Soc., vol. 58, no. 2, pp. 231–294, 1945.                [39] T. Stefanov, H. Nikolov, L. Bogdanov, and A. Popov, ‘‘DAEDALUS
            [12] N.Chomsky,‘‘Threemodelsforthedescriptionoflanguage,’’IEEETrans.                  frameworkforhigh-levelsynthesis:Past,presentandfuture,’’inProc.25th
                 Inf. Theory, vol. IT-2, no. 3, pp. 113–124, Sep. 1956.                           Int. Conf. Electron., Jun. 2021, pp. 1–6.
            [13] N. Chomsky, ‘‘On certain formal properties of grammars,’’ Inf. Control,    [40] S. Ha and H. Jung, ‘‘HOPES: Programming platform approach for
                 vol. 2, no. 2, pp. 137–167, Jun. 1959.                                           embeddedsystemsdesign,’’inHandbookofHardware/SoftwareCodesign.
            [14] D. Harel and B. Rumpe, ‘‘Meaningful modeling: What’s the semantics of            Dordrecht, The Netherlands: Springer, 2017, pp. 951–981.
                 ‘semantics?’’’ Computer, vol. 37, no. 10, pp. 64–72, Oct. 2004.            [41] A. Sangiovanni-Vincentelli, L. Carloni, F. De Bernardinis, and M. Sgroi,
            [15] D. D. Gajski and R. H. Kuhn, ‘‘New VLSI tools,’’ Computer, vol. 16,              ‘‘Benefits and challenges for platform-based design,’’ in Proc. 41st Annu.
                 no. 12, pp. 11–14, 1983.                                                         Design Autom. Conf., Jun. 2004, pp. 409–414.

            116346                                                                                                                                      VOLUME11,2023
             T. Mohammadat: MoD for Computing Systems: A Categorical Approach

             [42] A.Sangiovanni-Vincentelli,‘‘Quovadis,SLD?Reasoningaboutthetrends                   direct current (HVDC) systems, NoC-based computing platform archi-
                   and challenges of system level design,’’ Proc. IEEE, vol. 95, no. 3,              tectural design using FPGAs, Linux-based device driver and firmware
                   pp. 467–506, Mar. 2007.                                                           development for edge-compute graphics processing, real-time operating
             [43] B. Bailey, G. Martin, and T. Anderson, Taxonomies for the Development              system (RTOS) kernel development for 8/16/32-bit microcontroller-based
                   and Verification of Digital Systems. Springer, 2005.                              educational devices, and test automation of .NET applications. Most
             [44] W. Ecker and J. Schreiner, ‘‘Introducing model-of-things (MoT) and                 recently, he has held key roles in research and development, consultancy,
                   model-of-design (MoD) for simpler and more efficient hardware gener-              and entrepreneurship with Embedded Computing Systems, Cleeven, and
                   ators,’’ in Proc. IFIP/IEEE Int. Conf. Very Large Scale Integr. (VLSI-SoC),       Topgolf, all based in Stockholm, Sweden. He is an active contributor to
                   Sep. 2016, pp. 1–6.                                                               diverse embedded computing system design and development projects.
             [45] C. Hein, T. Carpenter, A. Gadient, R. Harr, P. Kalutkiewicz, and                   From 2010 to 2011 and from 2016 to 2021, he was involved in research
                   V. Madisetti, ‘‘RASSP VHDL modeling terminology and taxonomy,’’                   projects at both Universiti Teknologi Petronas and the KTH Royal Institute
                   RASSPTaxonomyWorkingGroup(RTWG),Tech.Rep.,1996.                                   of Technology. He participated in five European Union (EU) and Swedish
             [46] A. Jantsch, S. Kumar, and A. Hemani, ‘‘The Rugby model: A conceptual               national research projects, focusing on the research and development of
                   frame for the study of modelling, analysis and synthesis concepts of              dynamic low-power embedded systems suitable for open and changing
                   electronic systems,’’ in Proc. Design, Autom. Test Eur. Conf. Exhib., 1999,
                   pp. 256–262.                                                                      environments. Furthermore, he has taught several master’s level courses
             [47] W.Ecker,M.Hofmeister,andS.März-Rössel,‘‘Thedesigncube:Amodel                       on embedded systems at both institutions. His research interests include
                   for VHDL designflow representation and its application,’’ in High-Level           embedded hardware and software co-development, architectural system-
                   System Modeling. Springer, 1996, pp. 83–128.                                      level design, run-time reconfigurability for radiation-hardened low-Earth
             [48] I. Konnov, J. Kukovec, and T.-H. Tran, ‘‘TLA+ model checking made                  orbit satellite systems, nanometric-scale resistive faults modeling, and
                   symbolic,’’ Proc. ACM Program. Lang., vol. 3, pp. 1–30, Oct. 2019.                hydrocarbon micro-tremor analysis using low-frequency MEMS-based
                                                                                                     accelerometers.
                                                                                                        Mr. Mohammadat is a Professional Member of the Association for
                                                                                                     Computing Machinery (ACM). Throughout his career, he was a recipient
                                                                                                     of multiple leadership and excellence awards, such as the Swedish Institute
                                        TAGE MOHAMMADAT(SeniorMember,IEEE)                           Scholarship and the PETRONAS Scholarship. He ranked among the
                                        was born in Abu Dhabi, United Arab Emirates,                 top 50 in the Sudanese Secondary School Examination, out of over
                                        in 1988. Hereceivedthebachelor’sdegree(Hons.)                100,000 participants. He has held notable elected positions in non-
                                        in electrical and electronic engineering from                governmental organizations, such as an Industrial Relations Officer, the
                                        Universiti Teknologi Petronas, Perak, Malaysia,              ExecutiveCommitteeoftheInstituteofElectricalandElectronicsEngineers
                                        in 2010, and the master’s degree in system-on-               (IEEE), Sweden, and the IEEE Region 8-Europe, Middle East, and Africa,
                                        chip (SoC) design from the KTH Royal Institute               the Chairperson of the Doctoral Committee, Sweden’s United Student
                                        of Technology, Stockholm, Sweden, in 2017.                   Unions (SFS), Sweden, the Presidium and a Board Member of the Ph.D.
                                           He has accumulated over 15 years of profes-               ChapterandtheInstituteofTechnology’sStudentUnion(Dr/THS),Sweden,
                                        sional experience, from 2008 to 2023, spanning               andaBoardMemberoftheKTHSectionSTTradeUnionforCivilServants,
             control system engineering to embedded computing system development.                    Sweden. He is a committed advocate for educational quality and equal
             He has contributed with his expertise to leading engineering organizations,             opportunity,particularlyintheStockholmregionofSweden.Hiscommunity
             including Cadence Design Systems, Petronas, Schlumberger, ABB, and                      service activities have included being a member of the university faculty
             Hitachi, as well as several governmental agencies. His industrial engineering           council, employment boards, and docent committees. He has served as a
             projects encompassawiderangeoftechnologies,suchassmartsingle-phase                      technical reviewer for IEEE conferences and symposia, as well as MDPI
             ac electronic energy meters, low-power nanometric VLSI-based MPSoC                      journals.
             testing, digital signal processor (DSP) control algorithms for high-voltage

             VOLUME11,2023                                                                                                                                                    116347

